{"ast":null,"code":"import * as SessionApiUtil from \"../util/session_api_util\";\nimport jwt_decode from \"jwt-decode\";\nexport const RECEIVE_CURRENT_USER = \"RECEIVE_CURRENT_USER\";\nexport const RECEIVE_ERRORS = \"RECEIVE_ERRORS\";\nexport const RECEIVE_USER_LOGOUT = \"RECEIVE_USER_LOGOUT\";\nexport const RECEIVE_CREATED_USER = \"RECEIVE_CREATED_USER\";\nexport const CLEAR_ERRORS = \"CLEAR_ERRORS\";\nexport const receiveCurrentUser = currentUser => {\n  debugger;\n  return {\n    type: RECEIVE_CURRENT_USER,\n    currentUser\n  };\n};\nexport const createdUser = user => ({\n  type: RECEIVE_CREATED_USER,\n  user\n});\nexport const logoutUser = () => ({\n  type: RECEIVE_USER_LOGOUT\n});\nexport const receiveErrors = errors => ({\n  type: RECEIVE_ERRORS,\n  errors\n});\nexport const clearErrors = () => ({\n  type: CLEAR_ERRORS\n});\nexport const registerUser = user => dispatch => SessionApiUtil.register(user).then(user => dispatch(createdUser(user))).catch(errors => dispatch(receiveErrors(errors.response.data)));\nexport const loginUser = user => dispatch => {\n  // debugger\n  return SessionApiUtil.login(user).then(response => {\n    const token = response.data.token; // remembers web token between different sessions\n\n    localStorage.setItem(\"jwtToken\", token);\n    SessionApiUtil.setAuthToken(token);\n    const decoded = jwt_decode(token);\n    dispatch(receiveCurrentUser(decoded));\n    debugger;\n  }).catch(errors => {\n    dispatch(receiveErrors(errors.response.data));\n  });\n};\nexport const logout = () => dispatch => {\n  localStorage.removeItem(\"jwtToken\");\n  SessionApiUtil.setAuthToken(false);\n  dispatch(logoutUser());\n};","map":{"version":3,"sources":["/Users/aliashafi/Documents/AppAcademy/Projects/NeuroDB/frontend/src/actions/session_actions.js"],"names":["SessionApiUtil","jwt_decode","RECEIVE_CURRENT_USER","RECEIVE_ERRORS","RECEIVE_USER_LOGOUT","RECEIVE_CREATED_USER","CLEAR_ERRORS","receiveCurrentUser","currentUser","type","createdUser","user","logoutUser","receiveErrors","errors","clearErrors","registerUser","dispatch","register","then","catch","response","data","loginUser","login","token","localStorage","setItem","setAuthToken","decoded","logout","removeItem"],"mappings":"AAAA,OAAO,KAAKA,cAAZ,MAAgC,0BAAhC;AACA,OAAOC,UAAP,MAAuB,YAAvB;AAGA,OAAO,MAAMC,oBAAoB,GAAG,sBAA7B;AACP,OAAO,MAAMC,cAAc,GAAG,gBAAvB;AACP,OAAO,MAAMC,mBAAmB,GAAG,qBAA5B;AACP,OAAO,MAAMC,oBAAoB,GAAG,sBAA7B;AAEP,OAAO,MAAMC,YAAY,GAAG,cAArB;AAEP,OAAO,MAAMC,kBAAkB,GAAIC,WAAD,IAAiB;AAC/C;AACA,SAAO;AACHC,IAAAA,IAAI,EAAEP,oBADH;AAEHM,IAAAA;AAFG,GAAP;AAIH,CANM;AAQP,OAAO,MAAME,WAAW,GAAIC,IAAD,KAAW;AAClCF,EAAAA,IAAI,EAAEJ,oBAD4B;AAElCM,EAAAA;AAFkC,CAAX,CAApB;AAKP,OAAO,MAAMC,UAAU,GAAG,OAAO;AAC7BH,EAAAA,IAAI,EAAEL;AADuB,CAAP,CAAnB;AAIP,OAAO,MAAMS,aAAa,GAAGC,MAAM,KAAK;AACpCL,EAAAA,IAAI,EAAEN,cAD8B;AAEpCW,EAAAA;AAFoC,CAAL,CAA5B;AAKP,OAAO,MAAMC,WAAW,GAAG,OAAO;AAC9BN,EAAAA,IAAI,EAAEH;AADwB,CAAP,CAApB;AAKP,OAAO,MAAMU,YAAY,GAAIL,IAAD,IAAWM,QAAD,IAClCjB,cAAc,CAACkB,QAAf,CAAwBP,IAAxB,EACKQ,IADL,CACYR,IAAD,IAAUM,QAAQ,CAACP,WAAW,CAACC,IAAD,CAAZ,CAD7B,EAEKS,KAFL,CAEaN,MAAD,IAAYG,QAAQ,CAACJ,aAAa,CAACC,MAAM,CAACO,QAAP,CAAgBC,IAAjB,CAAd,CAFhC,CADG;AAMP,OAAO,MAAMC,SAAS,GAAIZ,IAAD,IAAWM,QAAD,IAAc;AAC7C;AACA,SACIjB,cAAc,CAACwB,KAAf,CAAqBb,IAArB,EACKQ,IADL,CACYE,QAAD,IAAc;AAAA,UACVI,KADU,GACDJ,QAAQ,CAACC,IADR,CACVG,KADU,EAEjB;;AACAC,IAAAA,YAAY,CAACC,OAAb,CAAqB,UAArB,EAAiCF,KAAjC;AACAzB,IAAAA,cAAc,CAAC4B,YAAf,CAA4BH,KAA5B;AACA,UAAMI,OAAO,GAAG5B,UAAU,CAACwB,KAAD,CAA1B;AACAR,IAAAA,QAAQ,CAACV,kBAAkB,CAACsB,OAAD,CAAnB,CAAR;AACA;AACH,GATL,EAUKT,KAVL,CAUaN,MAAD,IAAY;AAChBG,IAAAA,QAAQ,CAACJ,aAAa,CAACC,MAAM,CAACO,QAAP,CAAgBC,IAAjB,CAAd,CAAR;AACH,GAZL,CADJ;AAeH,CAjBM;AAoBP,OAAO,MAAMQ,MAAM,GAAG,MAAOb,QAAD,IAAc;AACtCS,EAAAA,YAAY,CAACK,UAAb,CAAwB,UAAxB;AACA/B,EAAAA,cAAc,CAAC4B,YAAf,CAA4B,KAA5B;AACAX,EAAAA,QAAQ,CAACL,UAAU,EAAX,CAAR;AACH,CAJM","sourcesContent":["import * as SessionApiUtil from \"../util/session_api_util\";\nimport jwt_decode from \"jwt-decode\";\n\n\nexport const RECEIVE_CURRENT_USER = \"RECEIVE_CURRENT_USER\";\nexport const RECEIVE_ERRORS = \"RECEIVE_ERRORS\";\nexport const RECEIVE_USER_LOGOUT = \"RECEIVE_USER_LOGOUT\";\nexport const RECEIVE_CREATED_USER = \"RECEIVE_CREATED_USER\";\n\nexport const CLEAR_ERRORS = \"CLEAR_ERRORS\";\n\nexport const receiveCurrentUser = (currentUser) => {\n    debugger\n    return {\n        type: RECEIVE_CURRENT_USER,\n        currentUser\n    }\n}\n\nexport const createdUser = (user) => ({\n    type: RECEIVE_CREATED_USER,\n    user\n})\n\nexport const logoutUser = () => ({\n    type: RECEIVE_USER_LOGOUT\n})\n\nexport const receiveErrors = errors => ({\n    type: RECEIVE_ERRORS,\n    errors\n})\n\nexport const clearErrors = () => ({\n    type: CLEAR_ERRORS\n})\n\n\nexport const registerUser = (user) => (dispatch) => (\n    SessionApiUtil.register(user)\n        .then( (user) => dispatch(createdUser(user)))\n        .catch( (errors) => dispatch(receiveErrors(errors.response.data)))\n)\n\nexport const loginUser = (user) => (dispatch) => {\n    // debugger\n    return (\n        SessionApiUtil.login(user)\n            .then( (response) => {\n                const {token} = response.data;\n                // remembers web token between different sessions\n                localStorage.setItem(\"jwtToken\", token);\n                SessionApiUtil.setAuthToken(token);\n                const decoded = jwt_decode(token);\n                dispatch(receiveCurrentUser(decoded))\n                debugger\n            })\n            .catch( (errors) => {\n                dispatch(receiveErrors(errors.response.data))\n            })\n    )\n}\n\n\nexport const logout = () => (dispatch) => {\n    localStorage.removeItem(\"jwtToken\")\n    SessionApiUtil.setAuthToken(false)\n    dispatch(logoutUser())\n}"]},"metadata":{},"sourceType":"module"}