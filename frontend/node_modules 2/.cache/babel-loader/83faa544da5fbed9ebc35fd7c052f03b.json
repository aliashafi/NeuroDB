{"ast":null,"code":"import * as PatientUtil from '../../src/util/patient_api_util'; // Action types\n\nexport const RECEIVE_PATIENTS = \"RECEIVE_PATIENTS\";\nexport const RECEIVE_PATIENT = \"RECEIVE_PATIENT\";\nexport const RECEIVE_UPDATED_PATIENT = \"RECEIVE_UPDATED_PATIENT\";\nexport const DELETE_PATIENT = \"DELETE_PATIENT\";\nexport const RECEIVE_PATIENT_ERRORS = \"RECEIVE_PATIENT_ERRORS\"; // Regular action creators\n\nexport const receivePatients = patients => ({\n  type: RECEIVE_PATIENTS,\n  patients\n});\nexport const receivePatient = patient => ({\n  type: RECEIVE_PATIENT,\n  patient\n});\nexport const receiveUpdatedPatient = patient => ({\n  type: RECEIVE_UPDATED_PATIENT,\n  patient\n});\nexport const removePatient = patientId => ({\n  type: DELETE_PATIENT,\n  patientId\n});\nexport const receivePatientErrors = errors => ({\n  type: RECEIVE_PATIENT_ERRORS,\n  errors\n}); //Thunk action creators\n\nexport const fetchPatients = () => dispatch => PatientUtil.getPatients().then(patients => dispatch(receivePatients(patients))).catch(err => dispatch(receivePatientErrors(err)));\nexport const fetchPatient = patientId => dispatch => PatientUtil.getPatient(patientId).then(patient => dispatch(receivePatient(patient))).catch(err => dispatch(receivePatientErrors(err)));\nexport const deletePatient = patientId => dispatch => PatientUtil.deletePatient(patientId).then(() => dispatch(removePatient(patientId))).catch(err => dispatch(receivePatientErrors(err)));\nexport const createPatient = data => dispatch => PatientUtil.createPatient(data).then(patient => dispatch(receivePatient(patient))).catch(err => dispatch(receivePatientErrors(err)));\nexport const updatePatient = data => dispatch => PatientUtil.updatePatient(data).then(patient => dispatch(receiveUpdatedPatient(patient))).catch(err => dispatch(receivePatientErrors(err)));","map":{"version":3,"sources":["/Users/aliashafi/Documents/AppAcademy/Projects/NeuroDB/frontend/src/actions/patient_actions.js"],"names":["PatientUtil","RECEIVE_PATIENTS","RECEIVE_PATIENT","RECEIVE_UPDATED_PATIENT","DELETE_PATIENT","RECEIVE_PATIENT_ERRORS","receivePatients","patients","type","receivePatient","patient","receiveUpdatedPatient","removePatient","patientId","receivePatientErrors","errors","fetchPatients","dispatch","getPatients","then","catch","err","fetchPatient","getPatient","deletePatient","createPatient","data","updatePatient"],"mappings":"AAAA,OAAO,KAAKA,WAAZ,MAA6B,iCAA7B,C,CAEA;;AACA,OAAO,MAAMC,gBAAgB,GAAG,kBAAzB;AACP,OAAO,MAAMC,eAAe,GAAG,iBAAxB;AACP,OAAO,MAAMC,uBAAuB,GAAG,yBAAhC;AACP,OAAO,MAAMC,cAAc,GAAG,gBAAvB;AACP,OAAO,MAAMC,sBAAsB,GAAG,wBAA/B,C,CAEP;;AACA,OAAO,MAAMC,eAAe,GAAIC,QAAD,KAAe;AAC1CC,EAAAA,IAAI,EAAEP,gBADoC;AAE1CM,EAAAA;AAF0C,CAAf,CAAxB;AAKP,OAAO,MAAME,cAAc,GAAIC,OAAD,KAAc;AACxCF,EAAAA,IAAI,EAAEN,eADkC;AAExCQ,EAAAA;AAFwC,CAAd,CAAvB;AAKP,OAAO,MAAMC,qBAAqB,GAAID,OAAD,KAAc;AAC/CF,EAAAA,IAAI,EAAEL,uBADyC;AAE/CO,EAAAA;AAF+C,CAAd,CAA9B;AAKP,OAAO,MAAME,aAAa,GAAGC,SAAS,KAAK;AACvCL,EAAAA,IAAI,EAAEJ,cADiC;AAEvCS,EAAAA;AAFuC,CAAL,CAA/B;AAKP,OAAO,MAAMC,oBAAoB,GAAGC,MAAM,KAAK;AAC3CP,EAAAA,IAAI,EAAEH,sBADqC;AAE3CU,EAAAA;AAF2C,CAAL,CAAnC,C,CAKP;;AACA,OAAO,MAAMC,aAAa,GAAG,MAAMC,QAAQ,IACvCjB,WAAW,CAACkB,WAAZ,GAA0BC,IAA1B,CAA+BZ,QAAQ,IAAIU,QAAQ,CAACX,eAAe,CAACC,QAAD,CAAhB,CAAnD,EACCa,KADD,CACOC,GAAG,IAAIJ,QAAQ,CAACH,oBAAoB,CAACO,GAAD,CAArB,CADtB,CADG;AAIP,OAAO,MAAMC,YAAY,GAAIT,SAAD,IAAeI,QAAQ,IAC/CjB,WAAW,CAACuB,UAAZ,CAAuBV,SAAvB,EAAkCM,IAAlC,CAAuCT,OAAO,IAAIO,QAAQ,CAACR,cAAc,CAACC,OAAD,CAAf,CAA1D,EACCU,KADD,CACOC,GAAG,IAAIJ,QAAQ,CAACH,oBAAoB,CAACO,GAAD,CAArB,CADtB,CADG;AAIP,OAAO,MAAMG,aAAa,GAAIX,SAAD,IAAeI,QAAQ,IAChDjB,WAAW,CAACwB,aAAZ,CAA0BX,SAA1B,EAAqCM,IAArC,CAA0C,MAAMF,QAAQ,CAACL,aAAa,CAACC,SAAD,CAAd,CAAxD,EACCO,KADD,CACOC,GAAG,IAAIJ,QAAQ,CAACH,oBAAoB,CAACO,GAAD,CAArB,CADtB,CADG;AAIP,OAAO,MAAMI,aAAa,GAAIC,IAAD,IAAUT,QAAQ,IAC3CjB,WAAW,CAACyB,aAAZ,CAA0BC,IAA1B,EAAgCP,IAAhC,CAAqCT,OAAO,IAAIO,QAAQ,CAACR,cAAc,CAACC,OAAD,CAAf,CAAxD,EACCU,KADD,CACOC,GAAG,IAAIJ,QAAQ,CAACH,oBAAoB,CAACO,GAAD,CAArB,CADtB,CADG;AAIP,OAAO,MAAMM,aAAa,GAAID,IAAD,IAAUT,QAAQ,IAC3CjB,WAAW,CAAC2B,aAAZ,CAA0BD,IAA1B,EAAgCP,IAAhC,CAAqCT,OAAO,IAAIO,QAAQ,CAACN,qBAAqB,CAACD,OAAD,CAAtB,CAAxD,EACCU,KADD,CACOC,GAAG,IAAIJ,QAAQ,CAACH,oBAAoB,CAACO,GAAD,CAArB,CADtB,CADG","sourcesContent":["import * as PatientUtil from '../../src/util/patient_api_util';\n\n// Action types\nexport const RECEIVE_PATIENTS = \"RECEIVE_PATIENTS\";\nexport const RECEIVE_PATIENT = \"RECEIVE_PATIENT\";\nexport const RECEIVE_UPDATED_PATIENT = \"RECEIVE_UPDATED_PATIENT\";\nexport const DELETE_PATIENT = \"DELETE_PATIENT\";\nexport const RECEIVE_PATIENT_ERRORS = \"RECEIVE_PATIENT_ERRORS\";\n\n// Regular action creators\nexport const receivePatients = (patients) => ({\n    type: RECEIVE_PATIENTS, \n    patients\n});\n\nexport const receivePatient = (patient) => ({\n    type: RECEIVE_PATIENT,\n    patient\n});\n\nexport const receiveUpdatedPatient = (patient) => ({\n    type: RECEIVE_UPDATED_PATIENT,\n    patient\n})\n\nexport const removePatient = patientId => ({\n    type: DELETE_PATIENT, \n    patientId\n});\n\nexport const receivePatientErrors = errors => ({\n    type: RECEIVE_PATIENT_ERRORS,\n    errors\n});\n\n//Thunk action creators\nexport const fetchPatients = () => dispatch =>\n    PatientUtil.getPatients().then(patients => dispatch(receivePatients(patients)))\n    .catch(err => dispatch(receivePatientErrors(err)));\n\nexport const fetchPatient = (patientId) => dispatch =>\n    PatientUtil.getPatient(patientId).then(patient => dispatch(receivePatient(patient)))\n    .catch(err => dispatch(receivePatientErrors(err)));\n\nexport const deletePatient = (patientId) => dispatch =>\n    PatientUtil.deletePatient(patientId).then(() => dispatch(removePatient(patientId)))\n    .catch(err => dispatch(receivePatientErrors(err)));\n\nexport const createPatient = (data) => dispatch =>\n    PatientUtil.createPatient(data).then(patient => dispatch(receivePatient(patient)))\n    .catch(err => dispatch(receivePatientErrors(err)));\n\nexport const updatePatient = (data) => dispatch =>\n    PatientUtil.updatePatient(data).then(patient => dispatch(receiveUpdatedPatient(patient)))\n    .catch(err => dispatch(receivePatientErrors(err)));"]},"metadata":{},"sourceType":"module"}