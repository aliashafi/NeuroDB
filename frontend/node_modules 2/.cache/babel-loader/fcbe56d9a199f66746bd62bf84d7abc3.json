{"ast":null,"code":"import _slicedToArray from \"/Users/aliashafi/Documents/AppAcademy/Projects/NeuroDB/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/aliashafi/Documents/AppAcademy/Projects/NeuroDB/frontend/src/components/Patients/PatientShowSubcomp/patient_show_imaging_data.jsx\";\nimport React, { useState, useEffect } from 'react';\nimport ElectrodeItem from './patient_show_electrodeItem';\nimport PlaceholderBrainProfile from '../../../images/placeholder_rotating_brain.gif';\n\nfunction PatientShowImagingData(props) {\n  const _useState = useState(false),\n        _useState2 = _slicedToArray(_useState, 2),\n        renderEdit = _useState2[0],\n        setRenderEdit = _useState2[1];\n\n  function renderComp() {\n    if (Object.keys(props.patient).length && props.patient.imaging) {\n      const electrodeMontage = props.patient.imaging.electrodeMontage;\n      return React.createElement(React.Fragment, null, electrodeMontage.map((electrode, i) => React.createElement(ElectrodeItem, {\n        key: i,\n        electrode: electrode,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 15\n        },\n        __self: this\n      })));\n    } else {\n      return null;\n    }\n  }\n\n  function renderButton() {\n    if (!renderEdit) {\n      return React.createElement(\"div\", {\n        className: \"btn-group\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 27\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        onClick: handleEditClick,\n        className: \"btn btn--card\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 28\n        },\n        __self: this\n      }, \"Edit\"));\n    } else {\n      return React.createElement(\"div\", {\n        className: \"btn-group\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 33\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        onClick: handleUpdateClick,\n        className: \"btn btn--card\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 34\n        },\n        __self: this\n      }, \"Update\"), React.createElement(\"div\", {\n        onClick: handleCancelClick,\n        className: \"btn btn--card\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 35\n        },\n        __self: this\n      }, \"Cancel\"));\n    }\n  }\n\n  function handleEditClick(e) {\n    setRenderEdit(!renderEdit);\n    const allValueFields = document.querySelectorAll('.inner-card__field-value');\n    Array.from(allValueFields).forEach(field => field.classList.add('editable'));\n  }\n\n  function handleUpdateClick(e) {\n    //grab form input and dispatch updatePatient\n    setRenderEdit(!renderEdit);\n    const data = {\n      _id: props.patient._id,\n      imaging: {//imaging data\n      }\n    };\n    props.updatePatient(data).then(() => {\n      const allValueFields = document.querySelectorAll('.inner-card__field-value');\n      Array.from(allValueFields).forEach(field => field.classList.remove('editable'));\n    });\n  }\n\n  function handleCancelClick(e) {\n    setRenderEdit(!renderEdit);\n    const allValueFields = document.querySelectorAll('.inner-card__field-value');\n    Array.from(allValueFields).forEach(field => field.classList.remove('editable'));\n  }\n\n  return React.createElement(\"div\", {\n    className: \"patient-show-inner-card-show\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }, renderButton(), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"patient-show-inner-card__header-imaging\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  }, \"Imaging Data\")), React.createElement(\"div\", {\n    className: \"header-divider\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    className: \"patient-show-inner-card__body-imaging-data\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"patient-show-inner-card__info-imaging-data\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"imaging-header-container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"electrodes-title\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79\n    },\n    __self: this\n  }, \"Electrodes\"), React.createElement(\"img\", {\n    className: \"brain-gif\",\n    src: PlaceholderBrainProfile,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"electrode-table-main-container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"patient-show-inner-card__chart-headers\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"electrode-header-number\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84\n    },\n    __self: this\n  }, \"Number\"), React.createElement(\"div\", {\n    className: \"electrode-header-region\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86\n    },\n    __self: this\n  }, \"Region\")), React.createElement(\"div\", {\n    className: \"electrode-table-body-container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88\n    },\n    __self: this\n  }, renderComp())))));\n}\n\nexport default PatientShowImagingData;","map":{"version":3,"sources":["/Users/aliashafi/Documents/AppAcademy/Projects/NeuroDB/frontend/src/components/Patients/PatientShowSubcomp/patient_show_imaging_data.jsx"],"names":["React","useState","useEffect","ElectrodeItem","PlaceholderBrainProfile","PatientShowImagingData","props","renderEdit","setRenderEdit","renderComp","Object","keys","patient","length","imaging","electrodeMontage","map","electrode","i","renderButton","handleEditClick","handleUpdateClick","handleCancelClick","e","allValueFields","document","querySelectorAll","Array","from","forEach","field","classList","add","data","_id","updatePatient","then","remove"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport ElectrodeItem from './patient_show_electrodeItem';\nimport PlaceholderBrainProfile from '../../../images/placeholder_rotating_brain.gif';\n\n\nfunction PatientShowImagingData(props) {\n    const [renderEdit, setRenderEdit] = useState(false);\n\n    function renderComp() {\n        if (Object.keys(props.patient).length && props.patient.imaging) {\n            const { electrodeMontage } = props.patient.imaging;\n            return (\n                <>\n                {electrodeMontage.map((electrode, i) => (\n                    <ElectrodeItem key={i} electrode={electrode} />\n                ))}\n                </>\n            );\n        } else {\n            return null;\n        }\n    }\n\n    function renderButton() {\n        if (!renderEdit) {\n            return (\n                <div className='btn-group'>\n                    <div onClick={handleEditClick} className='btn btn--card'>Edit</div>\n                </div>\n            )\n        } else {\n            return (\n            <div className='btn-group'>\n                <div onClick={handleUpdateClick} className='btn btn--card'>Update</div>\n                <div onClick={handleCancelClick} className='btn btn--card'>Cancel</div>\n            </div>\n            )\n        }\n    }\n\n    function handleEditClick(e) {\n        setRenderEdit(!renderEdit);\n        const allValueFields = document.querySelectorAll('.inner-card__field-value');\n        Array.from(allValueFields).forEach(field => field.classList.add('editable'));\n    }\n\n    function handleUpdateClick(e) {\n        //grab form input and dispatch updatePatient\n        setRenderEdit(!renderEdit);\n        const data = {\n            _id: props.patient._id,\n            imaging: { \n                //imaging data\n            }\n        };\n\n        props.updatePatient(data)\n        .then(() => {\n            const allValueFields = document.querySelectorAll('.inner-card__field-value');\n            Array.from(allValueFields).forEach(field => field.classList.remove('editable'));\n        });\n    }\n\n    function handleCancelClick(e) {\n        setRenderEdit(!renderEdit);\n  \n        const allValueFields = document.querySelectorAll('.inner-card__field-value');\n        Array.from(allValueFields).forEach(field => field.classList.remove('editable'));\n    }\n\n    return (\n        <div className='patient-show-inner-card-show'>\n            {renderButton()}\n            <div><div className='patient-show-inner-card__header-imaging'>Imaging Data</div></div>\n            <div className='header-divider'></div>\n            <div className='patient-show-inner-card__body-imaging-data'>\n                <div className='patient-show-inner-card__info-imaging-data'>\n                    <div className='imaging-header-container'>\n                        <div className='electrodes-title'>Electrodes</div>\n                        <img className='brain-gif' src={PlaceholderBrainProfile} />\n                    </div>\n                    <div className='electrode-table-main-container'>\n                        <div className='patient-show-inner-card__chart-headers'>\n                            <div className='electrode-header-number'>Number</div>\n                            {/* <div className='electrode-header-id'>ID</div> */}\n                            <div className='electrode-header-region'>Region</div>\n                        </div>\n                        <div className='electrode-table-body-container'>\n                            {renderComp()}\n                        </div>\n                    </div>\n                </div>\n            </div>           \n\n        </div>\n    );\n}\n\nexport default PatientShowImagingData;"]},"metadata":{},"sourceType":"module"}