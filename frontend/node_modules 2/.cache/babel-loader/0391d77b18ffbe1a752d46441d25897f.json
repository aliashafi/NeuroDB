{"ast":null,"code":"var _jsxFileName = \"/Users/aliashafi/Documents/AppAcademy/Projects/NeuroDB/frontend/src/components/Patients/form/ImagingForm.jsx\";\nimport React from 'react';\nimport AddElectrodeForm from './imaging/addElectrodeForm';\nimport MontageIndex from './imaging/montageIndex';\n\nclass ImagingForm extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      numElecs: [0],\n      electrodes: {},\n      montage: {}\n    };\n    this.addElec = this.addElec.bind(this);\n    this.deleteElec = this.deleteElec.bind(this);\n    this.addElecToState = this.addElecToState.bind(this);\n    this.renderMontage = this.renderMontage.bind(this);\n    this.updateMontage = this.updateMontage.bind(this);\n  }\n\n  componentDidUpdate(prevProp, prevState) {\n    if (prevState !== this.state) {\n      this.props.updateForm('electrodeMontage', Object.values(this.state.montage), 'imaging');\n    }\n  }\n\n  addElec() {\n    this.state.numElecs.push(1 + this.state.numElecs[this.state.numElecs.length - 1]);\n    this.setState({\n      numElecs: this.state.numElecs\n    });\n  }\n\n  deleteElec(num) {\n    let newState = this.state.numElecs.slice(0, num);\n\n    if (this.state.numElecs.length === num) {\n      let remove = Object.assign({}, this.state.electrodes);\n      delete remove[num];\n      this.setState({\n        numElecs: newState,\n        electrodes: remove\n      });\n    } else {\n      let remove = Object.assign({}, this.state.electrodes);\n      delete remove[num];\n      newState = this.state.numElecs.slice(0, num).concat(this.state.numElecs.slice(num + 1));\n      this.setState({\n        numElecs: newState,\n        electrodes: remove\n      });\n    }\n  }\n\n  addElecToState(num, elec) {\n    let newState = Object.assign({}, this.state.electrodes, {\n      [num]: elec\n    });\n    this.setState({\n      electrodes: newState\n    });\n  }\n\n  renderMontage() {\n    let electrodes = Object.values(this.state.electrodes);\n    let montage = {};\n    let j = 1;\n    electrodes.forEach(elec => {\n      for (let i = 0; i < elec.numElecs; i++) {\n        let subElec = {\n          electrodeNum: j,\n          electrodeID: \"\".concat(elec.region, 1),\n          electrodeRegion: elec.region\n        };\n        montage[j] = subElec;\n        j++;\n      }\n    });\n    this.setState({\n      montage: montage\n    }); // debugger\n  }\n\n  updateMontage(idx, elec) {\n    let newState = Object.assign({}, this.state.montage);\n    delete newState[idx];\n    newState[idx] = elec; // debugger\n\n    this.setState({\n      montage: newState\n    });\n  }\n\n  render() {\n    if (this.props.currentStep !== \"imaging data\") {\n      return null;\n    }\n\n    let addElecForms = this.state.numElecs.map(elecForm => {\n      return React.createElement(AddElectrodeForm, {\n        key: elecForm,\n        num: elecForm,\n        deleteElec: this.deleteElec,\n        addElecToState: this.addElecToState,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92\n        },\n        __self: this\n      });\n    });\n    return React.createElement(\"div\", {\n      className: \"patient-dem-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      className: \"patient-show-inner-card__header initial-header\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }, \"Imaging\"), React.createElement(\"div\", {\n      className: \"header-divider\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"patient-add-imaging\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"left-side\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }, \"Add to Montage\"), React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }, React.createElement(\"i\", {\n      onClick: () => this.addElec(),\n      className: \"far fa-plus-square clickable\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }))), React.createElement(\"div\", {\n      className: \"left-side__electrode-form\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    }, addElecForms, React.createElement(\"div\", {\n      className: \"btn btn--card margin-left-none\",\n      onClick: this.renderMontage,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    }, \"Render Montage\")))), React.createElement(\"div\", {\n      className: \"right-side\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128\n      },\n      __self: this\n    }, \"Montage\"), React.createElement(MontageIndex, {\n      key: \"montage-idx\",\n      montage: Object.values(this.state.montage),\n      updateMontage: this.updateMontage,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    }))));\n  }\n\n}\n\nexport default ImagingForm;","map":{"version":3,"sources":["/Users/aliashafi/Documents/AppAcademy/Projects/NeuroDB/frontend/src/components/Patients/form/ImagingForm.jsx"],"names":["React","AddElectrodeForm","MontageIndex","ImagingForm","Component","constructor","props","state","numElecs","electrodes","montage","addElec","bind","deleteElec","addElecToState","renderMontage","updateMontage","componentDidUpdate","prevProp","prevState","updateForm","Object","values","push","length","setState","num","newState","slice","remove","assign","concat","elec","j","forEach","i","subElec","electrodeNum","electrodeID","region","electrodeRegion","idx","render","currentStep","addElecForms","map","elecForm"],"mappings":"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","sourcesContent":["import React from 'react'\nimport AddElectrodeForm from './imaging/addElectrodeForm'\nimport MontageIndex from './imaging/montageIndex'\n\nclass ImagingForm extends React.Component {\n\n    constructor(props){\n        super(props)\n        this.state = {\n            numElecs: [0],\n            electrodes: {},\n            montage: {},\n        }\n        this.addElec = this.addElec.bind(this);\n        this.deleteElec = this.deleteElec.bind(this);\n        this.addElecToState = this.addElecToState.bind(this);\n        this.renderMontage = this.renderMontage.bind(this);\n        this.updateMontage = this.updateMontage.bind(this);\n    }\n\n    componentDidUpdate(prevProp, prevState){\n        if (prevState !== this.state){\n            this.props.updateForm('electrodeMontage', Object.values(this.state.montage), 'imaging')\n        }\n    }\n\n    addElec(){\n        this.state.numElecs.push(1 + this.state.numElecs[this.state.numElecs.length - 1])\n        this.setState({ numElecs: this.state.numElecs })\n    }\n\n    deleteElec(num){\n        let newState = this.state.numElecs.slice(0, num)\n        if (this.state.numElecs.length === num){\n            let remove = Object.assign({}, this.state.electrodes);\n            delete remove[num];\n            this.setState({ numElecs: newState, electrodes: remove});\n        }else{\n            let remove = Object.assign({}, this.state.electrodes);\n            delete remove[num];\n            newState = this.state.numElecs.slice(0, num).concat(this.state.numElecs.slice(num + 1));\n            this.setState({ numElecs: newState, electrodes: remove});\n        }\n    }\n\n    \n\n    addElecToState(num, elec){\n        let newState = Object.assign({}, this.state.electrodes, {[num] : elec})\n        this.setState({electrodes: newState})\n    }\n\n    renderMontage() {\n        let electrodes = Object.values(this.state.electrodes)\n        let montage = {}\n        let j = 1\n        electrodes.forEach(elec => {\n            \n            for (let i = 0; i < elec.numElecs; i++) {\n                let subElec = {\n                    electrodeNum: j,\n                    electrodeID: `${elec.region}${1}`,\n                    electrodeRegion: elec.region\n                }\n                montage[j] = (subElec);\n                j ++\n            }\n        })\n\n        this.setState({montage: montage})\n        // debugger\n    }\n\n    updateMontage(idx, elec){\n        let newState = Object.assign({}, this.state.montage)\n        delete newState[idx]\n        newState[idx] = elec\n        // debugger\n        this.setState({montage: newState});\n    }\n\n\n\n    render(){\n\n        if (this.props.currentStep !== \"imaging data\") {\n            return null\n        }\n\n        let addElecForms = this.state.numElecs.map(elecForm => {\n            return(\n                <AddElectrodeForm \n                    key={elecForm}\n                    num={elecForm}\n                    deleteElec={this.deleteElec}\n                    addElecToState={this.addElecToState}\n                     />   \n            )\n        })\n\n\n        \n        return(\n            <div className=\"patient-dem-container\">\n                <h1 className=\"patient-show-inner-card__header initial-header\">Imaging</h1>\n                <div className='header-divider'></div>\n                \n                <div className=\"patient-add-imaging\">\n                        <div className=\"left-side\">\n                            <div>\n                            <h1>Add to Montage</h1><span><i onClick={() => this.addElec()} className=\"far fa-plus-square clickable\"></i></span>\n                            </div>\n                            <div className=\"left-side__electrode-form\">\n\n                            <div>\n                                {addElecForms}\n\n                                <div className=\"btn btn--card margin-left-none\" onClick={this.renderMontage}>\n                                    Render Montage\n                                </div>\n                            </div>\n                            </div>\n                            \n                        </div>\n\n\n                        <div className=\"right-side\">\n                        <h1>Montage</h1>\n                            <MontageIndex \n                                key=\"montage-idx\"\n                                montage={Object.values(this.state.montage)} \n                                updateMontage={this.updateMontage}/> \n                        </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default ImagingForm;"]},"metadata":{},"sourceType":"module"}