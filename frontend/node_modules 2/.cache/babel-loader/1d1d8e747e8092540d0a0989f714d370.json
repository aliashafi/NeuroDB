{"ast":null,"code":"var _jsxFileName = \"/Users/aliashafi/Documents/AppAcademy/Projects/NeuroDB/frontend/src/components/Patients/PatientIndex.jsx\";\nimport React from 'react';\nimport '../../css/patient_table.scss'; // import PatientIndexItem from './PatientIndexItem';\n\nimport PatientIndexSideBar from './PatientIndexSubcomp/PatientIndexSideBar';\nimport PatientTable from './PatientIndexSubcomp/PatientTable';\nimport PatientPopUp from './PatientIndexSubcomp/PatientPopUp';\n\nclass PatientIndex extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      patients: [],\n      slide: \"false\",\n      notFound: false,\n      currentPatient: {}\n    };\n    this.toggleSlide = this.toggleSlide.bind(this);\n    this.updatePatientsWithFilter = this.updatePatientsWithFilter.bind(this);\n    this.handleQuickView = this.handleQuickView.bind(this);\n    this.closeQuickView = this.closeQuickView.bind(this);\n  }\n\n  componentDidMount() {\n    this.props.fetchPatients();\n  }\n\n  updatePatientsWithFilter(filteredPatients) {\n    if (filteredPatients.length == 0) {\n      this.setState({\n        notFound: true\n      });\n    } else {\n      this.setState({\n        patients: filteredPatients,\n        notFound: false\n      });\n    }\n  }\n\n  toggleSlide() {\n    if (this.state.slide) {\n      this.openNav();\n    } else {\n      this.closeNav();\n    }\n\n    this.setState({\n      slide: !this.state.slide\n    });\n  }\n\n  openNav() {\n    document.querySelector(\".side-nav-container-index\").style.width = \"300px\"; // document.querySelector(\".hold-advanced-search\").style.marginLeft = \"250px\";\n  }\n\n  closeNav() {\n    document.querySelector(\".side-nav-container-index\").style.width = \"0\";\n    document.querySelector(\".hold-advanced-search\").style.marginLeft = \"0\";\n  }\n\n  handleQuickView(patient) {\n    this.setState({\n      currentPatient: patient\n    });\n  }\n\n  closeQuickView() {\n    this.setState({\n      currentPatient: {}\n    });\n  }\n\n  render() {\n    const patients = this.state.patients.length === 0 ? this.props.patients : this.state.patients; // console.log(this.props.patients)\n\n    return React.createElement(\"div\", {\n      className: \"hold-advanced-search\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }, React.createElement(PatientIndexSideBar, {\n      patients: this.props.patients,\n      updatePatientsWithFilter: this.updatePatientsWithFilter,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"patient-index-page\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"patient-index-page__headers\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }, React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }, \"NeuroDB Database\"), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }, \"All Patients\")), React.createElement(PatientTable, {\n      patients: patients,\n      handleQuickView: this.handleQuickView,\n      closeQuickView: this.closeQuickView,\n      toggleSlide: this.toggleSlide,\n      notFound: this.state.notFound,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    })), Object.values(this.state.currentPatient).length !== 0 ? React.createElement(PatientPopUp, {\n      closeQuickView: this.closeQuickView,\n      patient: this.state.currentPatient,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }) : \"\");\n  }\n\n}\n\n;\nexport default PatientIndex;","map":{"version":3,"sources":["/Users/aliashafi/Documents/AppAcademy/Projects/NeuroDB/frontend/src/components/Patients/PatientIndex.jsx"],"names":["React","PatientIndexSideBar","PatientTable","PatientPopUp","PatientIndex","Component","constructor","props","state","patients","slide","notFound","currentPatient","toggleSlide","bind","updatePatientsWithFilter","handleQuickView","closeQuickView","componentDidMount","fetchPatients","filteredPatients","length","setState","openNav","closeNav","document","querySelector","style","width","marginLeft","patient","render","Object","values"],"mappings":"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","sourcesContent":["import React from 'react';\nimport '../../css/patient_table.scss'\n// import PatientIndexItem from './PatientIndexItem';\nimport PatientIndexSideBar from './PatientIndexSubcomp/PatientIndexSideBar';\nimport PatientTable from './PatientIndexSubcomp/PatientTable';\nimport PatientPopUp from './PatientIndexSubcomp/PatientPopUp'\n\nclass PatientIndex extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            patients: [],\n            slide: \"false\",\n            notFound: false,\n            currentPatient: {}\n        }\n\n        this.toggleSlide = this.toggleSlide.bind(this)\n        this.updatePatientsWithFilter = this.updatePatientsWithFilter.bind(this);\n        this.handleQuickView = this.handleQuickView.bind(this);\n        this.closeQuickView = this.closeQuickView.bind(this);\n    }\n\n    componentDidMount() {\n        this.props.fetchPatients();\n    }\n\n    updatePatientsWithFilter(filteredPatients){\n        if (filteredPatients.length == 0){\n            this.setState({notFound: true})\n        }else{\n            this.setState({\n            patients: filteredPatients,\n            notFound: false\n        })\n        }\n    }\n\n    toggleSlide(){\n        if (this.state.slide){\n            this.openNav();\n        }else{\n            this.closeNav();\n        }\n\n        this.setState({\n            slide: !this.state.slide\n        })\n    }\n\n    openNav() {\n        document.querySelector(\".side-nav-container-index\").style.width = \"300px\";\n        // document.querySelector(\".hold-advanced-search\").style.marginLeft = \"250px\";\n    }\n    closeNav() {\n        document.querySelector(\".side-nav-container-index\").style.width = \"0\";\n        document.querySelector(\".hold-advanced-search\").style.marginLeft = \"0\";\n    }\n\n    handleQuickView(patient){\n        this.setState({currentPatient: patient})\n    }\n\n    closeQuickView(){\n        this.setState({ currentPatient: {} })\n    }\n\n    \n\n    render() {\n        const patients = this.state.patients.length === 0 ? this.props.patients : this.state.patients\n        // console.log(this.props.patients)\n\n        return (\n            <div className=\"hold-advanced-search\">\n                {/* {this.state.component} */}\n\n                <PatientIndexSideBar \n                    patients={this.props.patients}\n                    updatePatientsWithFilter={this.updatePatientsWithFilter}\n                    />\n                \n                <div className=\"patient-index-page\">\n                    <div className=\"patient-index-page__headers\">\n                        <h2>NeuroDB Database</h2>\n                        <h3>All Patients</h3>\n                    </div>\n\n                    \n                    <PatientTable \n                        patients={patients} \n                        handleQuickView={this.handleQuickView}\n                        closeQuickView={this.closeQuickView}\n                        toggleSlide={this.toggleSlide}\n                        notFound={this.state.notFound}\n                        />\n                    \n                </div>\n\n                {Object.values(this.state.currentPatient).length !== 0 ? \n                <PatientPopUp \n                closeQuickView={this.closeQuickView}\n                patient={this.state.currentPatient}/>: \"\" }\n                \n            </div>\n        )\n    }\n};\n\nexport default PatientIndex;"]},"metadata":{},"sourceType":"module"}