{"ast":null,"code":"var _jsxFileName = \"/Users/aliashafi/Documents/AppAcademy/Projects/NeuroDB/frontend/src/components/Dashboard/demographics_percent_bar_graph.jsx\";\nimport React, { useState, useEffect } from 'react';\nimport * as d3 from 'd3';\nimport '../../css/deethree.scss';\n\nfunction DemographicsPercentBarGraph(props) {\n  const dominantHandArr = props.patients.map(patient => patient.demographics.dominantHand);\n  const genderArr = props.patients.map(patient => patient.demographics.gender);\n  const languageDominanceArr = props.patients.map(patient => patient.demographics.languageDominance);\n  const total = props.patients.length;\n  const leftHandCount = dominantHandArr.filter(el => el === 'L').length;\n  const rightHandCount = dominantHandArr.filter(el => el === 'R').length;\n  const maleCount = genderArr.filter(el => el === 'M').length;\n  const femaleCount = genderArr.filter(el => el === 'F').length;\n  const leftLangDom = languageDominanceArr.filter(el => el === 'L').length;\n  const rightLangDom = languageDominanceArr.filter(el => el === 'R').length;\n  const data = [{\n    category: 'gender',\n    leftVal: maleCount / total,\n    rightVal: femaleCount / total\n  }, {\n    category: 'dominant hand',\n    leftVal: leftHandCount / total,\n    rightVal: rightHandCount / total\n  }, {\n    category: 'language dominance',\n    leftVal: leftLangDom / total,\n    rightVal: rightLangDom / total\n  }];\n  useEffect(() => {\n    renderPercentBar();\n  }, []);\n\n  function renderPercentBar() {\n    const svg = d3.select('.percent-bar');\n    const width = +svg.attr('width');\n    const height = +svg.attr('height');\n    const format = d3.format(\".0%\");\n\n    const render = data => {\n      //value accessors\n      const xValue1 = d => d.leftVal;\n\n      const xValue2 = d => d.rightVal;\n\n      const yValue = d => d.category;\n\n      const margin = {\n        top: 40,\n        right: 20,\n        bottom: 20,\n        left: 20\n      };\n      const innerWidth = width - margin.left - margin.right;\n      const innerHeight = height - margin.top - margin.bottom; //horizontal scale --- each scale need domain and range defined\n\n      const xScale = d3.scaleLinear().domain([0, 1]).range([0, innerWidth]); //vertical scale --- band scale for ordinal elements\n      //bandwidth: computed width of a single bar\n\n      const yScale = d3.scaleBand().domain(data.map(d => d.category)).range([0, innerHeight]).padding(0.4); // console.log(yScale.bandwidth())\n\n      const categoryG = svg.selectAll('.category-group').data(data).enter().append('g').attr('class', 'category-group').attr('transform', d => \"translate(\".concat(margin.left, \", \").concat(yScale(d.category) + margin.top, \")\"));\n      svg.append('text').attr('class', 'title').text('General Demographics').attr('transform', \"translate(\".concat(width / 2, \", 40)\"));\n      const leftRect = categoryG.append('rect').attr('width', d => xScale(xValue1(d))).attr('height', d => yScale.bandwidth()).attr('class', 'left-bar');\n      categoryG.append('text').text(d => format(d.leftVal)).attr('class', 'bar-percent-label').attr('transform', \"translate(5, \".concat(yScale.bandwidth() / 2, \")\"));\n      const rightRect = categoryG.append('rect').attr('width', d => xScale(xValue2(d))).attr('height', d => yScale.bandwidth()).attr('class', 'right-bar').attr('transform', d => 'translate(' + xScale(xValue1(d)) + ', 0)');\n      categoryG.append('text').text(d => format(d.rightVal)).attr('transform', \"translate(\".concat(innerWidth - 70, \", \").concat(yScale.bandwidth() / 2, \")\")).attr('class', 'bar-percent-label');\n      categoryG.append('text').text(d => \"\".concat(d.category)).attr('class', 'percent-bar-name').attr('transform', d => \"translate(\".concat(innerWidth / 2, \", \").concat(yScale.bandwidth() + 20, \" )\"));\n    };\n\n    render(data);\n  }\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98\n    },\n    __self: this\n  }, React.createElement(\"svg\", {\n    className: \"percent-bar\",\n    width: \"400\",\n    height: \"400\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99\n    },\n    __self: this\n  }));\n}\n\nexport default DemographicsPercentBarGraph;","map":{"version":3,"sources":["/Users/aliashafi/Documents/AppAcademy/Projects/NeuroDB/frontend/src/components/Dashboard/demographics_percent_bar_graph.jsx"],"names":["React","useState","useEffect","d3","DemographicsPercentBarGraph","props","dominantHandArr","patients","map","patient","demographics","dominantHand","genderArr","gender","languageDominanceArr","languageDominance","total","length","leftHandCount","filter","el","rightHandCount","maleCount","femaleCount","leftLangDom","rightLangDom","data","category","leftVal","rightVal","renderPercentBar","svg","select","width","attr","height","format","render","xValue1","d","xValue2","yValue","margin","top","right","bottom","left","innerWidth","innerHeight","xScale","scaleLinear","domain","range","yScale","scaleBand","padding","categoryG","selectAll","enter","append","text","leftRect","bandwidth","rightRect"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from 'react';\nimport * as d3 from 'd3';\nimport '../../css/deethree.scss';\n\nfunction DemographicsPercentBarGraph(props) {\n    const dominantHandArr = props.patients.map(patient => patient.demographics.dominantHand);\n    const genderArr = props.patients.map(patient => patient.demographics.gender);\n    const languageDominanceArr = props.patients.map(patient => patient.demographics.languageDominance);\n\n    const total = props.patients.length;\n    const leftHandCount = dominantHandArr.filter(el => el === 'L').length;\n    const rightHandCount = dominantHandArr.filter(el => el === 'R').length;\n    const maleCount = genderArr.filter(el => el === 'M').length;\n    const femaleCount = genderArr.filter(el => el === 'F').length;\n    const leftLangDom = languageDominanceArr.filter(el => el === 'L').length;\n    const rightLangDom = languageDominanceArr.filter(el => el === 'R').length;\n\n    const data = [\n        {category: 'gender', leftVal: (maleCount/total), rightVal: (femaleCount/total)}, \n        {category: 'dominant hand', leftVal: (leftHandCount/total), rightVal: (rightHandCount/total)},\n        {category: 'language dominance', leftVal: (leftLangDom/total), rightVal: (rightLangDom/total)}];\n    \n\n    useEffect(() => {\n        renderPercentBar();\n    }, []);\n\n\n    function renderPercentBar() {\n        const svg = d3.select('.percent-bar');\n        const width = +svg.attr('width');\n        const height = +svg.attr('height');\n        const format = d3.format(\".0%\");\n        \n        const render = data => {\n            //value accessors\n            const xValue1 = d => d.leftVal;\n            const xValue2 = d => d.rightVal;\n            const yValue = d => d.category;\n            const margin = { top: 40, right: 20, bottom: 20, left: 20 };\n            const innerWidth = width - margin.left - margin.right;\n            const innerHeight = height - margin.top - margin.bottom;\n\n            //horizontal scale --- each scale need domain and range defined\n            const xScale = d3.scaleLinear()\n                .domain([0, 1])\n                .range([0, innerWidth]);\n                    \n            //vertical scale --- band scale for ordinal elements\n            //bandwidth: computed width of a single bar\n            const yScale = d3.scaleBand()\n                .domain(data.map(d => d.category))\n                .range([0, innerHeight])\n                .padding(0.4);\n                // console.log(yScale.bandwidth())\n\n            const categoryG = svg.selectAll('.category-group')\n                .data(data)\n                .enter()\n                .append('g')\n                .attr('class', 'category-group')\n                .attr('transform', d => `translate(${margin.left}, ${yScale(d.category) + margin.top})`);\n            svg.append('text')\n                .attr('class', 'title')\n                .text('General Demographics')\n                .attr('transform', `translate(${width/2}, 40)`);\n            const leftRect = categoryG.append('rect')\n                .attr('width', d => xScale(xValue1(d)))\n                .attr('height', d => yScale.bandwidth())\n                .attr('class', 'left-bar');\n            categoryG.append('text')\n                .text(d => format(d.leftVal))\n                .attr('class', 'bar-percent-label')\n                .attr('transform', `translate(5, ${yScale.bandwidth()/2})`);\n\n            const rightRect = categoryG.append('rect')\n                .attr('width', d => xScale(xValue2(d)))\n                .attr('height', d => yScale.bandwidth())\n                .attr('class', 'right-bar')\n                .attr('transform', d => 'translate(' + xScale(xValue1(d)) + ', 0)');\n\n            categoryG.append('text')\n                .text(d => format(d.rightVal))\n                .attr('transform', `translate(${innerWidth-70}, ${yScale.bandwidth()/2})`)\n                .attr('class', 'bar-percent-label');\n            \n            categoryG.append('text')\n                .text(d => `${d.category}`)\n                .attr('class', 'percent-bar-name')\n                .attr('transform', d =>`translate(${innerWidth/2}, ${yScale.bandwidth()+20} )`);\n        }\n\n        render(data);\n    }\n\n\n    return (\n        <div>\n            <svg className='percent-bar' width='400' height='400'></svg>\n        </div>\n    );\n}\n\nexport default DemographicsPercentBarGraph;"]},"metadata":{},"sourceType":"module"}