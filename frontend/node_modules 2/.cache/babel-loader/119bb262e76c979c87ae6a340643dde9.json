{"ast":null,"code":"import { RECEIVE_PATIENT, RECEIVE_PATIENTS, RECEIVE_UPDATED_PATIENT, DELETE_PATIENT } from '../actions/patient_actions';\nimport merge from 'lodash/merge';\nexport default ((state = {}, action) => {\n  Object.freeze(state);\n\n  switch (action.type) {\n    case RECEIVE_PATIENT:\n      // Does this have the data key array?????????\n      return merge({}, state, {\n        [action.patient.data._id]: action.patient.data\n      });\n\n    case RECEIVE_PATIENTS:\n      let newState = {};\n      action.patients.data.forEach(patient => newState[patient._id] = patient);\n      return newState;\n\n    case RECEIVE_UPDATED_PATIENT:\n      let patient = state[action.patient.data.updatePatient._id];\n      let updated = merge({}, patient, action.patient.data.updatePatient);\n      return merge({}, state, {\n        [updated._id]: updated\n      });\n\n    case DELETE_PATIENT:\n      newState = Object.assign({}, state);\n      delete newState[action.patientId];\n      return newState;\n\n    default:\n      return state;\n  }\n});","map":{"version":3,"sources":["/Users/aliashafi/Documents/AppAcademy/Projects/NeuroDB/frontend/src/reducers/patient_reducer.js"],"names":["RECEIVE_PATIENT","RECEIVE_PATIENTS","RECEIVE_UPDATED_PATIENT","DELETE_PATIENT","merge","state","action","Object","freeze","type","patient","data","_id","newState","patients","forEach","updatePatient","updated","assign","patientId"],"mappings":"AAAA,SAASA,eAAT,EAA0BC,gBAA1B,EAA4CC,uBAA5C,EAAqEC,cAArE,QAA2F,4BAA3F;AACA,OAAOC,KAAP,MAAkB,cAAlB;AAEA,gBAAe,CAACC,KAAK,GAAG,EAAT,EAAaC,MAAb,KAAwB;AACnCC,EAAAA,MAAM,CAACC,MAAP,CAAcH,KAAd;;AACA,UAAQC,MAAM,CAACG,IAAf;AACI,SAAKT,eAAL;AAAsB;AAClB,aAAOI,KAAK,CAAC,EAAD,EAAKC,KAAL,EAAY;AAAE,SAACC,MAAM,CAACI,OAAP,CAAeC,IAAf,CAAoBC,GAArB,GAA2BN,MAAM,CAACI,OAAP,CAAeC;AAA5C,OAAZ,CAAZ;;AACJ,SAAKV,gBAAL;AACI,UAAIY,QAAQ,GAAG,EAAf;AACAP,MAAAA,MAAM,CAACQ,QAAP,CAAgBH,IAAhB,CAAqBI,OAArB,CAA6BL,OAAO,IAAMG,QAAQ,CAACH,OAAO,CAACE,GAAT,CAAR,GAAuBF,OAAjE;AACA,aAAOG,QAAP;;AACJ,SAAKX,uBAAL;AACI,UAAIQ,OAAO,GAAGL,KAAK,CAACC,MAAM,CAACI,OAAP,CAAeC,IAAf,CAAoBK,aAApB,CAAkCJ,GAAnC,CAAnB;AACA,UAAIK,OAAO,GAAGb,KAAK,CAAC,EAAD,EAAKM,OAAL,EAAcJ,MAAM,CAACI,OAAP,CAAeC,IAAf,CAAoBK,aAAlC,CAAnB;AACA,aAAOZ,KAAK,CAAC,EAAD,EAAKC,KAAL,EAAY;AAAE,SAACY,OAAO,CAACL,GAAT,GAAeK;AAAjB,OAAZ,CAAZ;;AACJ,SAAKd,cAAL;AACIU,MAAAA,QAAQ,GAAGN,MAAM,CAACW,MAAP,CAAc,EAAd,EAAkBb,KAAlB,CAAX;AACA,aAAOQ,QAAQ,CAACP,MAAM,CAACa,SAAR,CAAf;AACA,aAAON,QAAP;;AACJ;AACI,aAAOR,KAAP;AAhBR;AAkBH,CApBD","sourcesContent":["import { RECEIVE_PATIENT, RECEIVE_PATIENTS, RECEIVE_UPDATED_PATIENT, DELETE_PATIENT } from '../actions/patient_actions';\nimport merge from 'lodash/merge';\n\nexport default (state = {}, action) => {\n    Object.freeze(state);\n    switch (action.type) {\n        case RECEIVE_PATIENT: // Does this have the data key array?????????\n            return merge({}, state, { [action.patient.data._id]: action.patient.data });\n        case RECEIVE_PATIENTS:\n            let newState = {};\n            action.patients.data.forEach(patient => ( newState[patient._id]= patient ));\n            return newState;\n        case RECEIVE_UPDATED_PATIENT:\n            let patient = state[action.patient.data.updatePatient._id];\n            let updated = merge({}, patient, action.patient.data.updatePatient);\n            return merge({}, state, { [updated._id]: updated });\n        case DELETE_PATIENT:\n            newState = Object.assign({}, state);\n            delete newState[action.patientId];\n            return newState;\n        default:\n            return state;\n    }\n};"]},"metadata":{},"sourceType":"module"}