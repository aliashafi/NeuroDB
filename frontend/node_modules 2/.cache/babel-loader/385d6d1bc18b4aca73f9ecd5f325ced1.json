{"ast":null,"code":"var _jsxFileName = \"/Users/aliashafi/Documents/AppAcademy/Projects/NeuroDB/frontend/src/components/Patients/form/AutoComplete.jsx\";\nimport React, { Component, Fragment } from \"react\";\nimport PropTypes from \"prop-types\";\nimport '../../../css/autocomplete.scss'; // Autocomplete function created with help from this tutorial https://alligator.io/react/react-autocomplete/\n\nclass Autocomplete extends Component {\n  constructor(props) {\n    super(props);\n\n    this.onChange = e => {\n      const suggestions = this.props.suggestions;\n      const userInput = e.currentTarget.value; // Filter our suggestions that don't contain the user's input\n\n      const filteredSuggestions = suggestions.filter(suggestion => suggestion.toLowerCase().indexOf(userInput.toLowerCase()) > -1); // Update the user input and filtered suggestions, reset the active\n      // suggestion and make sure the suggestions are shown\n\n      this.setState({\n        activeSuggestion: 0,\n        filteredSuggestions,\n        showSuggestions: true,\n        userInput: e.currentTarget.value\n      });\n    };\n\n    this.onClick = e => {\n      // Update the user input and reset the rest of the state\n      this.setState({\n        activeSuggestion: 0,\n        filteredSuggestions: [],\n        showSuggestions: false,\n        userInput: e.currentTarget.innerText\n      });\n\n      if (this.props.handleEnter) {\n        this.props.handleEnter(this.props.filter, e.currentTarget.innerText);\n      }\n    };\n\n    this.onKeyDown = e => {\n      const _this$state = this.state,\n            activeSuggestion = _this$state.activeSuggestion,\n            filteredSuggestions = _this$state.filteredSuggestions; // User pressed the enter key, update the input and close the\n      // suggestions\n\n      if (e.keyCode === 13) {\n        this.setState({\n          activeSuggestion: 0,\n          showSuggestions: false,\n          userInput: filteredSuggestions[activeSuggestion]\n        });\n\n        if (this.props.handleEnter) {\n          this.props.handleEnter(this.props.filter, filteredSuggestions[activeSuggestion]);\n        }\n      } // User pressed the up arrow, decrement the index\n      else if (e.keyCode === 38) {\n          if (activeSuggestion === 0) {\n            return;\n          }\n\n          this.setState({\n            activeSuggestion: activeSuggestion - 1\n          });\n        } // User pressed the down arrow, increment the index\n        else if (e.keyCode === 40) {\n            if (activeSuggestion - 1 === filteredSuggestions.length) {\n              return;\n            }\n\n            this.setState({\n              activeSuggestion: activeSuggestion + 1\n            });\n          }\n    };\n\n    this.state = {\n      activeSuggestion: 0,\n      filteredSuggestions: [],\n      showSuggestions: false,\n      userInput: \"\"\n    };\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevState.userInput !== this.state.userInput) {\n      this.props.updateState(this.state.userInput);\n    }\n  }\n\n  render() {\n    const onChange = this.onChange,\n          onClick = this.onClick,\n          onKeyDown = this.onKeyDown,\n          _this$state2 = this.state,\n          activeSuggestion = _this$state2.activeSuggestion,\n          filteredSuggestions = _this$state2.filteredSuggestions,\n          showSuggestions = _this$state2.showSuggestions,\n          userInput = _this$state2.userInput;\n    let suggestionsListComponent;\n\n    if (showSuggestions && userInput) {\n      if (filteredSuggestions.length) {\n        suggestionsListComponent = React.createElement(\"ul\", {\n          className: this.props.suggestionClassName,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 124\n          },\n          __self: this\n        }, filteredSuggestions.map((suggestion, index) => {\n          let className; // Flag the active suggestion with a class\n\n          if (index === activeSuggestion) {\n            className = \"suggestion-active\";\n          }\n\n          return React.createElement(\"li\", {\n            className: className,\n            key: suggestion,\n            onClick: onClick,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 134\n            },\n            __self: this\n          }, suggestion);\n        }));\n      } else {\n        suggestionsListComponent = React.createElement(\"div\", {\n          className: \"no-suggestions\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 147\n          },\n          __self: this\n        }, React.createElement(\"em\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 148\n          },\n          __self: this\n        }, \"No electrodes with that name\"));\n      }\n    }\n\n    return React.createElement(Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      className: this.props.className,\n      type: \"text\",\n      onChange: onChange,\n      onKeyDown: onKeyDown,\n      value: userInput,\n      placeholder: \"Search by Region\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156\n      },\n      __self: this\n    }), suggestionsListComponent);\n  }\n\n}\n\nAutocomplete.propTypes = {\n  suggestions: PropTypes.instanceOf(Array)\n};\nAutocomplete.defaultProps = {\n  suggestions: []\n};\nexport default Autocomplete;","map":{"version":3,"sources":["/Users/aliashafi/Documents/AppAcademy/Projects/NeuroDB/frontend/src/components/Patients/form/AutoComplete.jsx"],"names":["React","Component","Fragment","PropTypes","Autocomplete","constructor","props","onChange","e","suggestions","userInput","currentTarget","value","filteredSuggestions","filter","suggestion","toLowerCase","indexOf","setState","activeSuggestion","showSuggestions","onClick","innerText","handleEnter","onKeyDown","state","keyCode","length","componentDidUpdate","prevProps","prevState","updateState","render","suggestionsListComponent","suggestionClassName","map","index","className","propTypes","instanceOf","Array","defaultProps"],"mappings":"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","sourcesContent":["import React, { Component, Fragment } from \"react\";\nimport PropTypes from \"prop-types\";\nimport '../../../css/autocomplete.scss'\n\n// Autocomplete function created with help from this tutorial https://alligator.io/react/react-autocomplete/\n\nclass Autocomplete extends Component {\n    static propTypes = {\n        suggestions: PropTypes.instanceOf(Array)\n    };\n\n    static defaultProps = {\n        suggestions: []\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            activeSuggestion: 0,\n            filteredSuggestions: [],\n            showSuggestions: false,\n            userInput: \"\"\n        };\n    }\n\n    componentDidUpdate(prevProps, prevState){\n        if (prevState.userInput !== this.state.userInput){\n            this.props.updateState(this.state.userInput)\n        }\n    }\n\n    onChange = e => {\n        const { suggestions } = this.props;\n        const userInput = e.currentTarget.value;\n\n        // Filter our suggestions that don't contain the user's input\n        const filteredSuggestions = suggestions.filter(\n            suggestion =>\n                suggestion.toLowerCase().indexOf(userInput.toLowerCase()) > -1\n        );\n\n        // Update the user input and filtered suggestions, reset the active\n        // suggestion and make sure the suggestions are shown\n        this.setState({\n            activeSuggestion: 0,\n            filteredSuggestions,\n            showSuggestions: true,\n            userInput: e.currentTarget.value\n        });\n\n        \n    };\n\n    // Event fired when the user clicks on a suggestion\n    onClick = e => {\n        // Update the user input and reset the rest of the state\n        this.setState({\n            activeSuggestion: 0,\n            filteredSuggestions: [],\n            showSuggestions: false,\n            userInput: e.currentTarget.innerText\n        });\n        if (this.props.handleEnter) {\n            this.props.handleEnter(this.props.filter, e.currentTarget.innerText)\n        }\n    };\n\n    // Event fired when the user presses a key down\n    onKeyDown = e => {\n        const { activeSuggestion, filteredSuggestions } = this.state;\n\n        // User pressed the enter key, update the input and close the\n        // suggestions\n        if (e.keyCode === 13) {\n            \n            this.setState({\n                activeSuggestion: 0,\n                showSuggestions: false,\n                userInput: filteredSuggestions[activeSuggestion]\n            });\n\n            if (this.props.handleEnter){\n                this.props.handleEnter(this.props.filter, filteredSuggestions[activeSuggestion])\n            }\n        }\n        \n        // User pressed the up arrow, decrement the index\n        else if (e.keyCode === 38) {\n            if (activeSuggestion === 0) {\n                return;\n            }\n\n            this.setState({ activeSuggestion: activeSuggestion - 1 });\n        }\n        // User pressed the down arrow, increment the index\n        else if (e.keyCode === 40) {\n            if (activeSuggestion - 1 === filteredSuggestions.length) {\n                return;\n            }\n\n            this.setState({ activeSuggestion: activeSuggestion + 1 });\n        }\n    };\n\n    render() {\n        const {\n            onChange,\n            onClick,\n            onKeyDown,\n            state: {\n                activeSuggestion,\n                filteredSuggestions,\n                showSuggestions,\n                userInput\n            }\n        } = this;\n\n        let suggestionsListComponent;\n\n        if (showSuggestions && userInput) {\n            if (filteredSuggestions.length) {\n                suggestionsListComponent = (\n                    <ul className={this.props.suggestionClassName}>\n                        {filteredSuggestions.map((suggestion, index) => {\n                            let className;\n\n                            // Flag the active suggestion with a class\n                            if (index === activeSuggestion) {\n                                className = \"suggestion-active\";\n                            }\n\n                            return (\n                                <li\n                                    className={className}\n                                    key={suggestion}\n                                    onClick={onClick}\n                                >\n                                    {suggestion}\n                                </li>\n                            );\n                        })}\n                    </ul>\n                );\n            } else {\n                suggestionsListComponent = (\n                    <div className=\"no-suggestions\">\n                        <em>No electrodes with that name</em>\n                    </div>\n                );\n            }\n        }\n\n        return (\n            <Fragment>\n                <input\n                    className={this.props.className}\n                    type=\"text\"\n                    onChange={onChange}\n                    onKeyDown={onKeyDown}\n                    value={userInput}\n                    placeholder=\"Search by Region\"\n                />\n                {suggestionsListComponent}\n            </Fragment>\n        );\n    }\n}\n\nexport default Autocomplete;"]},"metadata":{},"sourceType":"module"}