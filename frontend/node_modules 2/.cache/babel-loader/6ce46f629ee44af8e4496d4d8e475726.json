{"ast":null,"code":"import _defineProperty from \"/Users/aliashafi/Documents/AppAcademy/Projects/NeuroDB/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/aliashafi/Documents/AppAcademy/Projects/NeuroDB/frontend/src/components/Patients/PatientIndexSubcomp/PatientBasicSearchBar.jsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from 'react';\nimport { sortByDate, sortByAge, sortByResearchID } from '../../../util/sort_api_util';\nimport '../../../css/patient_table.scss';\nimport '../../../css/_tackons.scss';\n\nclass PatientBasicSearchBar extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      filters: {\n        researchId: \"\",\n        gender: \"\",\n        dominantHand: \"\",\n        nativeLanguage: \"\",\n        age: \"\"\n      },\n      viewDropDown: false,\n      orderBy: \"\",\n      patients: []\n    };\n    this.toggleDropDown = this.toggleDropDown.bind(this);\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevState.filters !== this.state.filters) {\n      this.searchBy();\n    }\n\n    if (prevState.patient !== this.state.patients) {}\n  } ///SEARCH\n\n\n  searchBy() {\n    let filteredPatients = [];\n    let researchCount = [];\n    let hasGenderCount = [];\n    let nativeLanguageCount = [];\n    let dominantHandCount = [];\n    this.props.patients.forEach((patient, index) => {\n      let hasResearchLetters = this.hasAnyLetters(patient.researchId, this.state.filters.researchId);\n      let hasGenderLetters = this.hasAnyLetters(patient.demographics.gender, this.state.filters.gender);\n      let hasNativeLanguageLetters = this.hasAnyLetters(patient.demographics.nativeLanguage, this.state.filters.nativeLanguage);\n      let hasDominantHandLetters = this.hasAnyLetters(patient.demographics.dominantHand, this.state.filters.dominantHand);\n      if (hasResearchLetters || hasGenderLetters || hasNativeLanguageLetters || hasDominantHandLetters) filteredPatients.push(patient);\n      if (hasResearchLetters) researchCount.push(index);\n      if (hasGenderLetters) hasGenderCount.push(index);\n      if (hasNativeLanguageLetters) nativeLanguageCount.push(index);\n      if (hasDominantHandLetters) dominantHandCount.push(index); // console.log(hasDominantHandLetters)\n    });\n    let order = this.sortByMostRelevant([researchCount, hasGenderCount, nativeLanguageCount, dominantHandCount]);\n    this.sortWithOrder(order, this.props.patients);\n  }\n\n  sortWithOrder(order, patients) {\n    let sorted = [];\n    order = order.reverse();\n    order.forEach(idx => sorted.push(patients[idx]));\n    this.props.updateTablePatients(sorted);\n  } //sort after the search\n\n\n  sortByMostRelevant(filters) {\n    let patientRelevance = {};\n    filters.forEach(filter => {\n      filter.map(patientIndex => {\n        if (!patientRelevance[\"patient-\".concat(patientIndex)]) patientRelevance[\"patient-\".concat(patientIndex)] = 0;\n        patientRelevance[\"patient-\".concat(patientIndex)] += 1;\n      });\n    });\n    let keys = Object.keys(patientRelevance);\n    keys.sort(function (a, b) {\n      return patientRelevance[a] - patientRelevance[b];\n    });\n    let sortedPatientIndicies = keys.map(keyIdx => {\n      let idx = keyIdx.split(\"-\")[1];\n      return parseInt(idx);\n    });\n    return sortedPatientIndicies;\n  } ///helper method for searching function\n\n\n  hasAnyLetters(value, letters) {\n    if (letters === \"\") return false;\n    if (value === undefined) return false;\n    value = value.split(\"\").map(v => v.toLowerCase());\n    let matchLetters = letters.split(\"\").every(char => value.includes(char.toLowerCase()));\n    let matchLength = value.slice(0, letters.length).join(\"\") === letters.split(\"\").map(v => v.toLowerCase()).join(\"\");\n    if (matchLetters && matchLength) return true;\n    return false;\n  } //handleInput for search methods\n\n\n  handleSearchInput(e) {\n    let id = e.target.id;\n    let value = e.target.value;\n\n    let newState = _objectSpread({}, this.state.filters);\n\n    newState[id] = value;\n    this.setState({\n      filters: newState\n    });\n  } ///SORT\n\n\n  sortBy(filter) {\n    let sorted = [];\n\n    if (filter === 'date of surgery') {\n      sorted = this.props.patients.sort(sortByDate);\n      this.props.updateTablePatients(sorted);\n    } else if (filter === 'age') {\n      sorted = this.props.patients.sort(sortByAge);\n      this.props.updateTablePatients(sorted);\n    } else if (filter === 'research id') {\n      sorted = this.props.patients.sort(sortByResearchID);\n      this.props.updateTablePatients(sorted);\n    }\n  }\n\n  handleOrder(filter) {\n    this.setState({\n      orderBy: \"Order By: \".concat(filter)\n    });\n    this.sortBy(filter);\n  }\n\n  toggleDropDown() {\n    this.setState({\n      viewDropDown: !this.state.viewDropDown\n    });\n  }\n\n  render() {\n    const activeClass = this.state.viewDropDown ? \"active\" : \"\";\n    return React.createElement(\"div\", {\n      className: \"search-bar no-padding\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"search-icon\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152\n      },\n      __self: this\n    }, React.createElement(\"i\", {\n      class: \"fas fa-search\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152\n      },\n      __self: this\n    })), React.createElement(\"input\", {\n      className: \"search-bar__researchId\",\n      type: \"text\",\n      placeholder: \"Search by Research ID\",\n      onChange: e => this.handleSearchInput(e),\n      id: \"researchId\",\n      value: this.state.filters.researchId,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"order-by-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"order-by search-bar__researchId\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"order-by__inner-text\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160\n      },\n      __self: this\n    }, this.state.orderBy !== \"\" ? this.state.orderBy : \"Order By\"), React.createElement(\"div\", {\n      onClick: this.toggleDropDown,\n      className: \"dropdown-icon \".concat(activeClass),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164\n      },\n      __self: this\n    }, React.createElement(\"i\", {\n      className: \"fas fa-caret-down\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164\n      },\n      __self: this\n    })), this.state.viewDropDown ? React.createElement(\"div\", {\n      className: \"order-by__dropdown-menue\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      onClick: () => this.handleOrder(\"age\"),\n      name: \"age\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168\n      },\n      __self: this\n    }, \"Age\"), React.createElement(\"div\", {\n      onClick: () => this.handleOrder(\"date of surgery\"),\n      name: \"date of surgery\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169\n      },\n      __self: this\n    }, \"Date of Surgery\"), React.createElement(\"div\", {\n      onClick: () => this.handleOrder(\"research id\"),\n      name: \"research id\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170\n      },\n      __self: this\n    }, \"Research Id\")) : \"\")), React.createElement(\"div\", {\n      onClick: this.props.toggleSlide,\n      className: \"btn_advanced-search\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177\n      },\n      __self: this\n    }, \"Advanced Search\"));\n  }\n\n}\n\nexport default PatientBasicSearchBar;","map":{"version":3,"sources":["/Users/aliashafi/Documents/AppAcademy/Projects/NeuroDB/frontend/src/components/Patients/PatientIndexSubcomp/PatientBasicSearchBar.jsx"],"names":["React","sortByDate","sortByAge","sortByResearchID","PatientBasicSearchBar","Component","constructor","props","state","filters","researchId","gender","dominantHand","nativeLanguage","age","viewDropDown","orderBy","patients","toggleDropDown","bind","componentDidUpdate","prevProps","prevState","searchBy","patient","filteredPatients","researchCount","hasGenderCount","nativeLanguageCount","dominantHandCount","forEach","index","hasResearchLetters","hasAnyLetters","hasGenderLetters","demographics","hasNativeLanguageLetters","hasDominantHandLetters","push","order","sortByMostRelevant","sortWithOrder","sorted","reverse","idx","updateTablePatients","patientRelevance","filter","map","patientIndex","keys","Object","sort","a","b","sortedPatientIndicies","keyIdx","split","parseInt","value","letters","undefined","v","toLowerCase","matchLetters","every","char","includes","matchLength","slice","length","join","handleSearchInput","e","id","target","newState","setState","sortBy","handleOrder","render","activeClass","toggleSlide"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { sortByDate, sortByAge, sortByResearchID } from '../../../util/sort_api_util'\nimport '../../../css/patient_table.scss'\nimport '../../../css/_tackons.scss'\n\n\nclass PatientBasicSearchBar extends React.Component{\n    constructor(props){\n        super(props)\n        this.state = {\n            filters: {\n                researchId: \"\",\n                gender: \"\",\n                dominantHand: \"\",\n                nativeLanguage: \"\",\n                age: \"\",\n            },\n            viewDropDown: false,\n            orderBy: \"\",\n            patients: [],\n        }\n\n        this.toggleDropDown = this.toggleDropDown.bind(this);\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        if (prevState.filters !== this.state.filters) {\n            this.searchBy()\n        }\n\n        if (prevState.patient !== this.state.patients){\n        }\n    }\n\n\n    ///SEARCH\n    searchBy() {\n\n        let filteredPatients = []\n        let researchCount = []\n        let hasGenderCount = []\n        let nativeLanguageCount = []\n        let dominantHandCount = []\n\n        this.props.patients.forEach((patient, index) => {\n            let hasResearchLetters = this.hasAnyLetters(patient.researchId, this.state.filters.researchId)\n            let hasGenderLetters = this.hasAnyLetters(patient.demographics.gender, this.state.filters.gender)\n            let hasNativeLanguageLetters = this.hasAnyLetters(patient.demographics.nativeLanguage, this.state.filters.nativeLanguage)\n            let hasDominantHandLetters = this.hasAnyLetters(patient.demographics.dominantHand, this.state.filters.dominantHand)\n            if (hasResearchLetters || hasGenderLetters || hasNativeLanguageLetters || hasDominantHandLetters) filteredPatients.push(patient);\n\n            if (hasResearchLetters) researchCount.push(index);\n            if (hasGenderLetters) hasGenderCount.push(index);\n            if (hasNativeLanguageLetters) nativeLanguageCount.push(index);\n            if (hasDominantHandLetters) dominantHandCount.push(index);\n            // console.log(hasDominantHandLetters)\n        })\n\n        let order = this.sortByMostRelevant([researchCount, hasGenderCount, nativeLanguageCount, dominantHandCount])\n\n        this.sortWithOrder(order, this.props.patients)\n    }\n\n\n    sortWithOrder(order, patients) {\n        let sorted = []\n        order = order.reverse()\n        order.forEach(idx => sorted.push(patients[idx]))\n        this.props.updateTablePatients(sorted)\n    }\n\n    //sort after the search\n    sortByMostRelevant(filters) {\n        let patientRelevance = {}\n        filters.forEach(filter => {\n            filter.map(patientIndex => {\n\n                if (!patientRelevance[`patient-${patientIndex}`]) patientRelevance[`patient-${patientIndex}`] = 0;\n                patientRelevance[`patient-${patientIndex}`] += 1\n            })\n        })\n        let keys = Object.keys(patientRelevance);\n        keys.sort(function (a, b) { return patientRelevance[a] - patientRelevance[b] });\n        let sortedPatientIndicies = keys.map(keyIdx => {\n            let idx = keyIdx.split(\"-\")[1]\n\n            return parseInt(idx)\n        })\n        return sortedPatientIndicies;\n    }\n\n    ///helper method for searching function\n    hasAnyLetters(value, letters) {\n        if (letters === \"\") return false;\n        if (value === undefined) return false;\n        value = value.split(\"\").map(v => v.toLowerCase())\n        \n        let matchLetters =  letters.split(\"\").every(char => value.includes(char.toLowerCase()))\n        let matchLength = value.slice(0,letters.length).join(\"\") === letters.split(\"\").map(v => v.toLowerCase()).join(\"\")\n        if (matchLetters && matchLength) return true;\n        return false;\n    }\n\n    //handleInput for search methods\n    handleSearchInput(e) {\n        let id = e.target.id\n        let value = e.target.value\n        let newState = { ...this.state.filters };\n        newState[id] = value \n        this.setState({\n            filters: newState\n        })\n    }\n\n    ///SORT\n\n    sortBy(filter) {\n        let sorted = [];\n\n        if (filter === 'date of surgery') {\n            sorted = this.props.patients.sort(sortByDate);\n            this.props.updateTablePatients(sorted)\n        } else if (filter === 'age') {\n            sorted = this.props.patients.sort(sortByAge);\n            this.props.updateTablePatients(sorted)\n        } else if (filter === 'research id') {\n            sorted = this.props.patients.sort(sortByResearchID);\n            this.props.updateTablePatients(sorted)\n        }\n\n        \n    }\n\n    handleOrder(filter){\n        this.setState({\n            orderBy: `Order By: ${filter}`\n        })\n        this.sortBy(filter)\n    }\n\n    toggleDropDown(){\n        this.setState({viewDropDown: !this.state.viewDropDown })\n    }\n\n\n    render(){\n\n        const activeClass = this.state.viewDropDown ? \"active\" : \"\"\n\n        return(\n            <div className=\"search-bar no-padding\" >\n                <div className=\"search-icon\"><i class=\"fas fa-search\"></i></div>\n                <input className=\"search-bar__researchId\" type=\"text\" placeholder='Search by Research ID'\n                    onChange={(e) => this.handleSearchInput(e)}\n                    id=\"researchId\"\n                    value={this.state.filters.researchId} />\n\n                <div className=\"order-by-container\">\n                    <div className=\"order-by search-bar__researchId\">\n                        <div className=\"order-by__inner-text\">\n                            {this.state.orderBy !== \"\" ? this.state.orderBy : \"Order By\"}\n                        </div>\n                        \n                        <div onClick={this.toggleDropDown} className={`dropdown-icon ${activeClass}`}><i className=\"fas fa-caret-down\"></i></div>\n\n                        {this.state.viewDropDown ? \n                        <div className=\"order-by__dropdown-menue\">\n                            <div onClick={() => this.handleOrder(\"age\")} name=\"age\">Age</div>\n                            <div onClick={() => this.handleOrder(\"date of surgery\")} name=\"date of surgery\">Date of Surgery</div>\n                            <div onClick={() => this.handleOrder(\"research id\")}name=\"research id\">Research Id</div>\n                        </div> : \"\"\n                        }\n                    </div>\n                    \n                </div>\n\n                <div onClick={this.props.toggleSlide} className=\"btn_advanced-search\">\n                    Advanced Search\n                </div>\n\n\n                {/* <input type=\"text\" \n                        placeholder='Search by Gender (M/F)'\n                        id=\"gender\"\n                        value={this.state.filters.gender} \n                        onChange={(e) => this.handleSearchInput(e)}/>\n\n                    <input type=\"text\"\n                        placeholder='Dominant Hand'\n                        id=\"dominantHand\"\n                        value={this.state.filters.dominantHand}\n                        onChange={(e) => this.handleSearchInput(e)} />\n\n                    <input type=\"text\"\n                        placeholder='Native Language'\n                        id=\"nativeLanguage\"\n                        value={this.state.filters.nativeLanguage}\n                        onChange={(e) => this.handleSearchInput(e)} /> */}\n\n\n            </div>\n        )\n    }\n}\n\nexport default PatientBasicSearchBar;"]},"metadata":{},"sourceType":"module"}