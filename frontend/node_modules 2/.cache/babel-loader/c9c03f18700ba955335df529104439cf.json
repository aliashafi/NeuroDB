{"ast":null,"code":"var _jsxFileName = \"/Users/aliashafi/Documents/AppAcademy/Projects/NeuroDB/frontend/src/components/Patients/PatientIndexSubcomp/PatientIndexSideBar.jsx\";\nimport React from 'react';\nimport CoverageSearch from './patient_search_by/CoverageSearch';\nimport DemographicSearch from './patient_search_by/DemographicSearch';\nimport MedicalHistorySearch from './patient_search_by/MedicalHistory';\nimport '../../../css/index_nav.scss';\nimport '../../../css/_tackons.scss';\n\nclass PatientIndexSideBar extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      filters: {\n        gender: \"\",\n        dominantHand: \"\",\n        nativeLanguages: [],\n        dateOfSurgery: [],\n        ageRange: [],\n        gender: \"\",\n        coverage: [],\n        BDI: [],\n        BAI: [],\n        epilepsyDiagnosis: []\n      },\n      strict: false,\n      patients: []\n    };\n    this.openSearch = this.openSearch.bind(this);\n    this.handleRadioInput = this.handleRadioInput.bind(this);\n    this.handleEnter = this.handleEnter.bind(this);\n    this.updateState = this.updateState.bind(this);\n    this.getFilteredPatients = this.getFilteredPatients.bind(this);\n    this.handleDateInput = this.handleDateInput.bind(this);\n    this.clearFilters = this.clearFilters.bind(this);\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevState.patients !== this.state.patients) {\n      this.props.updatePatientsWithFilter(this.state.patients);\n    }\n  }\n\n  updateState() {}\n\n  clearFilters() {\n    let filters = {\n      gender: \"\",\n      dominantHand: \"\",\n      nativeLanguages: [],\n      dateOfSurgery: [],\n      ageRange: [],\n      gender: \"\",\n      coverage: [],\n      BDI: [],\n      BAI: [],\n      epilepsyDiagnosis: []\n    };\n    this.setState({\n      filters: filters,\n      patients: this.props.patients\n    });\n  } //filtering logic\n\n\n  getFilteredPatients() {\n    let filters = Object.keys(this.state.filters);\n    let count = 0;\n    let filteredPatientIndicies = [];\n    filters.forEach(filter => {\n      if (this.state.filters[filter].length !== 0) {\n        count++;\n        filteredPatientIndicies = filteredPatientIndicies.concat(this.getPatientIndex(filter, this.state.filters[filter]));\n      }\n    });\n    let filteredPatients = [];\n    filteredPatientIndicies = this.getStrictFilter(filteredPatientIndicies, count);\n    filteredPatientIndicies.map(idx => filteredPatients.push(this.props.patients[idx]));\n    this.setState({\n      patients: filteredPatients\n    });\n  } //only get patients that have all of the criteria\n\n\n  getStrictFilter(indicies, count) {\n    let indexCount = {};\n    indicies.forEach(index => {\n      if (!indexCount[index]) indexCount[index] = 0;\n      indexCount[index] += 1;\n    });\n    let strictFilterIndicies = [];\n    Object.keys(indexCount).forEach(idx => {\n      if (indexCount[idx] === count) strictFilterIndicies.push(idx);\n    });\n    return strictFilterIndicies;\n  } ///get the indecies of patients of a certain criteria\n\n\n  getPatientIndex(filter, value) {\n    let indiciesOfPatients = []; // debugger\n    //look over the coverage and see if the patient has filtered region\n\n    if (filter === \"coverage\") {\n      this.props.patients.forEach((patient, index) => {\n        // if (this.electrodeMontageHasFilter(patient.imaging.electrodeMontage, value)) indiciesOfPatients.push(index);\n        if (this.electrodeMontageHasAllFilter(patient.imaging.electrodeMontage, value)) indiciesOfPatients.push(index);\n      });\n    } else if (typeof value === \"string\" || typeof value === \"number\") {\n      //get patient indecies that match sex, dominant hand and gender\n      this.props.patients.forEach((patient, index) => {\n        if (patient.demographics[filter] === value) indiciesOfPatients.push(index);\n      });\n    } else if (filter === \"age\") {\n      this.props.patients.forEach((patient, index) => {\n        if (patient.demographics[filter] > value[0] && patient.demographics[filter] < value[1]) indiciesOfPatients.push(index);\n      });\n    } else if (filter === \"dateOfSurgery\") {\n      this.props.patients.forEach((patient, index) => {\n        if (new Date(patient[filter]) > new Date(value[0]) && new Date(patient[filter]) < new Date(value[1])) indiciesOfPatients.push(index);\n      });\n    } else if (filter === \"BDI\" || filter === \"BAI\") {\n      this.props.patients.forEach((patient, index) => {\n        if (patient.medicalHistory[filter] > value[0] && patient.medicalHistory[filter] < value[1]) indiciesOfPatients.push(index);\n      });\n    }\n\n    return indiciesOfPatients;\n  }\n\n  electrodeMontageHasFilter(montage, regions) {\n    let hasAny = false;\n    regions.forEach(region => {\n      if (montage.some(e => e.electrodeRegion === region)) {\n        hasAny = true;\n      }\n    });\n    return hasAny;\n  }\n\n  electrodeMontageHasAllFilter(montage, regions) {\n    let montageRegions = montage.map(elec => elec.electrodeRegion);\n    return regions.every(reg => montageRegions.includes(reg));\n  } //handle enter on search bar for anantomy \n\n\n  handleEnter(filter, input) {\n    if (filter === \"coverage\") {\n      let newCoverage = this.state.filters.coverage;\n      newCoverage.push(input);\n      let newFilters = Object.assign({}, this.state.filters);\n      newFilters.coverage = newCoverage;\n      this.setState({\n        filters: newFilters\n      });\n    }\n  } // change state on radio button click\n\n\n  handleRadioInput(filter, value) {\n    let newState = this.state.filters;\n    newState[filter] = value;\n    this.setState({\n      filters: newState\n    });\n  }\n\n  handleDateInput(date) {\n    let newState = this.state.filters;\n    let dateArray = newState.dateOfSurgery;\n    dateArray[date.target.name] = date.target.value;\n    newState.dateOfSurgery = dateArray;\n    this.setState({\n      filters: newState\n    });\n  }\n\n  openSearch(className, size) {\n    document.querySelector(className).style.height = size; // document.querySelector(\".hold-advanced-search\").style.marginLeft = \"250px\";\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"sticky\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"side-nav-container-index slide\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"side-nav-headers\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191\n      },\n      __self: this\n    }, \"Advance Search\"), React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192\n      },\n      __self: this\n    }, \"Click icons to open form\")), React.createElement(\"div\", {\n      className: \"side-nav__filters\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 194\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"filters__coverage\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195\n      },\n      __self: this\n    }, React.createElement(CoverageSearch, {\n      openSearch: this.openSearch,\n      updateState: this.updateState,\n      handleEnter: this.handleEnter,\n      filters: this.state.filters,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 196\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 204\n      },\n      __self: this\n    }, React.createElement(DemographicSearch, {\n      openSearch: this.openSearch,\n      updateState: this.updateState,\n      handleRadioInput: this.handleRadioInput,\n      filters: this.state.filters,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 205\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 213\n      },\n      __self: this\n    }, React.createElement(MedicalHistorySearch, {\n      openSearch: this.openSearch,\n      updateState: this.updateState,\n      handleDateInput: this.handleDateInput,\n      handleRadioInput: this.handleRadioInput,\n      filters: this.state.filters,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 214\n      },\n      __self: this\n    }))), React.createElement(\"div\", {\n      className: \"save-clear-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 225\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"btn_advanced-search\",\n      id: \"margin-left-none\",\n      onClick: this.getFilteredPatients,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 226\n      },\n      __self: this\n    }, \"Search\"), React.createElement(\"div\", {\n      className: \"btn_advanced-search\",\n      id: \"margin-left-none\",\n      onClick: this.clearFilters,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 227\n      },\n      __self: this\n    }, \"Clear\"))));\n  }\n\n}\n\n;\nexport default PatientIndexSideBar;","map":{"version":3,"sources":["/Users/aliashafi/Documents/AppAcademy/Projects/NeuroDB/frontend/src/components/Patients/PatientIndexSubcomp/PatientIndexSideBar.jsx"],"names":["React","CoverageSearch","DemographicSearch","MedicalHistorySearch","PatientIndexSideBar","Component","constructor","props","state","filters","gender","dominantHand","nativeLanguages","dateOfSurgery","ageRange","coverage","BDI","BAI","epilepsyDiagnosis","strict","patients","openSearch","bind","handleRadioInput","handleEnter","updateState","getFilteredPatients","handleDateInput","clearFilters","componentDidUpdate","prevProps","prevState","updatePatientsWithFilter","setState","Object","keys","count","filteredPatientIndicies","forEach","filter","length","concat","getPatientIndex","filteredPatients","getStrictFilter","map","idx","push","indicies","indexCount","index","strictFilterIndicies","value","indiciesOfPatients","patient","electrodeMontageHasAllFilter","imaging","electrodeMontage","demographics","Date","medicalHistory","electrodeMontageHasFilter","montage","regions","hasAny","region","some","e","electrodeRegion","montageRegions","elec","every","reg","includes","input","newCoverage","newFilters","assign","newState","date","dateArray","target","name","className","size","document","querySelector","style","height","render"],"mappings":"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","sourcesContent":["import React from 'react';\nimport CoverageSearch from './patient_search_by/CoverageSearch'\nimport DemographicSearch from './patient_search_by/DemographicSearch'\nimport MedicalHistorySearch from './patient_search_by/MedicalHistory'\nimport '../../../css/index_nav.scss'\nimport '../../../css/_tackons.scss'\n\nclass PatientIndexSideBar extends React.Component {\n\n    constructor(props){\n        super(props)\n        this.state = {\n            filters:{\n                gender: \"\",\n                dominantHand: \"\",\n                nativeLanguages: [],\n                dateOfSurgery: [],\n                ageRange: [],\n                gender: \"\",\n                coverage: [],\n                BDI: [],\n                BAI: [],\n                epilepsyDiagnosis: []\n            },\n            strict: false,\n            patients: []\n        }\n\n        this.openSearch = this.openSearch.bind(this);\n        this.handleRadioInput = this.handleRadioInput.bind(this);\n        this.handleEnter = this.handleEnter.bind(this);\n        this.updateState = this.updateState.bind(this);\n        this.getFilteredPatients = this.getFilteredPatients.bind(this);\n        this.handleDateInput = this.handleDateInput.bind(this);\n        this.clearFilters = this.clearFilters.bind(this);\n\n    }\n\n    componentDidUpdate(prevProps, prevState){\n        if (prevState.patients !== this.state.patients){\n            this.props.updatePatientsWithFilter(this.state.patients)\n        }\n    }\n\n    updateState(){\n\n    }\n\n    clearFilters(){\n        let filters = {\n            gender: \"\",\n            dominantHand: \"\",\n            nativeLanguages: [],\n            dateOfSurgery: [],\n            ageRange: [],\n            gender: \"\",\n            coverage: [],\n            BDI: [],\n            BAI: [],\n            epilepsyDiagnosis: []\n        }\n        this.setState({\n            filters: filters,\n            patients: this.props.patients\n            })\n    }\n\n\n    //filtering logic\n    getFilteredPatients(){\n        let filters = Object.keys(this.state.filters);\n        let count = 0\n        let filteredPatientIndicies = [];\n        filters.forEach(filter => {\n            if (this.state.filters[filter].length !== 0) {\n                count ++;\n                filteredPatientIndicies = filteredPatientIndicies.concat(this.getPatientIndex(filter, this.state.filters[filter]));\n            }\n        })\n\n        let filteredPatients = []\n        filteredPatientIndicies = this.getStrictFilter(filteredPatientIndicies, count)\n        filteredPatientIndicies.map(idx => filteredPatients.push(this.props.patients[idx]))\n    \n        this.setState({patients: filteredPatients});\n    }\n\n    //only get patients that have all of the criteria\n    getStrictFilter(indicies, count){\n        let indexCount = {}\n        indicies.forEach(index => {\n            if (!indexCount[index]) indexCount[index] = 0;\n            indexCount[index] += 1;\n        })\n        \n        let strictFilterIndicies = []\n        Object.keys(indexCount).forEach(idx => {\n            if (indexCount[idx] === count) strictFilterIndicies.push(idx);\n        })\n        return strictFilterIndicies;\n    }\n\n    ///get the indecies of patients of a certain criteria\n    getPatientIndex(filter, value){\n        let indiciesOfPatients = [];\n        // debugger\n\n        //look over the coverage and see if the patient has filtered region\n        if (filter === \"coverage\"){\n            this.props.patients.forEach((patient, index) => {\n                // if (this.electrodeMontageHasFilter(patient.imaging.electrodeMontage, value)) indiciesOfPatients.push(index);\n                if (this.electrodeMontageHasAllFilter(patient.imaging.electrodeMontage, value)) indiciesOfPatients.push(index);\n            })\n        }else if (typeof value === \"string\" || typeof value === \"number\"){\n            //get patient indecies that match sex, dominant hand and gender\n            this.props.patients.forEach((patient, index) => {\n                if (patient.demographics[filter] === value) indiciesOfPatients.push(index);\n            })\n        } else if (filter === \"age\"){\n            this.props.patients.forEach((patient, index) => {\n                if (patient.demographics[filter] > value[0] && patient.demographics[filter] < value[1]) indiciesOfPatients.push(index);\n            })\n        } else if (filter === \"dateOfSurgery\") {\n            this.props.patients.forEach((patient, index) => {\n                if (new Date(patient[filter]) > new Date(value[0]) && new Date(patient[filter]) < new Date(value[1])) indiciesOfPatients.push(index);\n            })\n        } else if (filter === \"BDI\" || filter === \"BAI\"){\n            this.props.patients.forEach((patient, index) => {\n                if (patient.medicalHistory[filter] > value[0] && patient.medicalHistory[filter] < value[1]) indiciesOfPatients.push(index);\n            })\n        }\n        return indiciesOfPatients;\n    }\n\n    electrodeMontageHasFilter(montage, regions){\n        let hasAny = false;\n        regions.forEach( region => {\n            if (montage.some(e => e.electrodeRegion === region)){\n                hasAny = true\n            }\n        })\n        return hasAny;\n    }\n\n    electrodeMontageHasAllFilter(montage, regions) {\n        let montageRegions = montage.map(elec => elec.electrodeRegion)\n        return regions.every(reg => montageRegions.includes(reg))\n    }\n\n    //handle enter on search bar for anantomy \n    handleEnter(filter, input){\n        if (filter === \"coverage\"){\n            let newCoverage = this.state.filters.coverage\n            newCoverage.push(input)\n            let newFilters = Object.assign({}, this.state.filters)\n            newFilters.coverage = newCoverage\n            this.setState({ filters: newFilters})\n        }\n    }\n\n    // change state on radio button click\n    handleRadioInput(filter, value){\n        let newState = this.state.filters;\n        newState[filter] = value\n        this.setState({filters: newState});\n    }\n\n    handleDateInput(date){\n        let newState = this.state.filters;\n        let dateArray = newState.dateOfSurgery;\n        dateArray[date.target.name] = date.target.value;\n        newState.dateOfSurgery = dateArray\n        this.setState({ filters: newState})\n        \n    }\n\n    openSearch(className, size) {\n        document.querySelector(className).style.height = size;\n        // document.querySelector(\".hold-advanced-search\").style.marginLeft = \"250px\";\n    }\n\n\n\n\n    render() {\n        return (\n            \n            <div className=\"sticky\">\n            <div className=\"side-nav-container-index slide\">\n                <div className=\"side-nav-headers\">\n                    <h1>Advance Search</h1>\n                    <h2>Click icons to open form</h2>\n                </div>\n                <div className=\"side-nav__filters\">\n                    <div className=\"filters__coverage\">\n                        <CoverageSearch \n                            openSearch={this.openSearch}\n                            updateState={this.updateState}\n                            handleEnter={this.handleEnter}\n                            filters={this.state.filters}\n                        />\n                        </div>\n\n                        <div>\n                            <DemographicSearch\n                                openSearch={this.openSearch}\n                                updateState={this.updateState}\n                                handleRadioInput={this.handleRadioInput}\n                                filters={this.state.filters}\n                            />\n                        </div>\n                    \n                        <div>\n                            <MedicalHistorySearch\n                                openSearch={this.openSearch}\n                                updateState={this.updateState}\n                                handleDateInput={this.handleDateInput}\n                                handleRadioInput={this.handleRadioInput}\n                                filters={this.state.filters}\n                            />\n                        </div>\n                        \n                </div>\n\n                <div className=\"save-clear-container\">\n                    <div className=\"btn_advanced-search\" id=\"margin-left-none\" onClick={this.getFilteredPatients}>Search</div>\n                    <div className=\"btn_advanced-search\" id=\"margin-left-none\" onClick={this.clearFilters}>Clear</div>\n                </div>\n\n            </div>\n            </div>\n            )}\n\n};\n\nexport default PatientIndexSideBar;"]},"metadata":{},"sourceType":"module"}