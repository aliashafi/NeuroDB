{"ast":null,"code":"import * as TaskUtil from '../util/task_api_util'; // Action types\n\nexport const RECEIVE_TASKS = 'RECEIVE_TASKS';\nexport const RECEIVE_TASK = 'RECEIVE_TASK';\nexport const RECEIVE_NEW_TASK = 'RECEIVE_NEW_TASK';\nexport const DELETE_TASK = 'DELETE_TASK';\nexport const RECEIVE_TASK_ERRORS = 'RECEIVE_TASK_ERRORS'; // Regular action creators\n\nexport const receiveTasks = tasks => ({\n  type: RECEIVE_TASKS,\n  tasks\n});\nexport const receiveTask = task => ({\n  type: RECEIVE_TASK,\n  task\n});\nexport const removeTask = taskId => ({\n  type: DELETE_TASK,\n  taskId\n});\nexport const receiveTaskErrors = errors => ({\n  type: RECEIVE_TASK_ERRORS,\n  errors\n});\nexport const receiveNewTask = patient => ({\n  type: RECEIVE_NEW_TASK,\n  patient\n}); //Thunk action creators\n\nexport const fetchTasks = patientId => dispatch => TaskUtil.getTasks(patientId).then(tasks => dispatch(receiveTasks(tasks))).catch(error => dispatch(receiveTaskErrors(error)));\nexport const fetchTask = task => dispatch => TaskUtil.getTask(task).then(task => dispatch(receiveTasks(task))).catch(error => dispatch(receiveTaskErrors(error)));\nexport const createTask = (patientId, task) => dispatch => TaskUtil.createTask(patientId, task).then(patient => dispatch(receiveTasks(patient))).catch(error => dispatch(receiveTaskErrors(error)));\nexport const updateTask = (taskId, taskData) => dispatch => TaskUtil.updateTask(taskId, taskData).then(task => dispatch(receiveTasks(task))).catch(error => dispatch(receiveTaskErrors(error)));\nexport const deleteTask = taskId => dispatch => TaskUtil.deleteTask(taskId).then(() => dispatch(receiveTasks(taskId))).catch(error => dispatch(receiveTaskErrors(error)));","map":{"version":3,"sources":["/Users/aliashafi/Documents/AppAcademy/Projects/NeuroDB/frontend/src/actions/task_actions.js"],"names":["TaskUtil","RECEIVE_TASKS","RECEIVE_TASK","RECEIVE_NEW_TASK","DELETE_TASK","RECEIVE_TASK_ERRORS","receiveTasks","tasks","type","receiveTask","task","removeTask","taskId","receiveTaskErrors","errors","receiveNewTask","patient","fetchTasks","patientId","dispatch","getTasks","then","catch","error","fetchTask","getTask","createTask","updateTask","taskData","deleteTask"],"mappings":"AAAA,OAAO,KAAKA,QAAZ,MAA0B,uBAA1B,C,CAEA;;AACA,OAAO,MAAMC,aAAa,GAAG,eAAtB;AACP,OAAO,MAAMC,YAAY,GAAG,cAArB;AACP,OAAO,MAAMC,gBAAgB,GAAG,kBAAzB;AACP,OAAO,MAAMC,WAAW,GAAG,aAApB;AACP,OAAO,MAAMC,mBAAmB,GAAG,qBAA5B,C,CAEP;;AACA,OAAO,MAAMC,YAAY,GAAIC,KAAD,KAAY;AACpCC,EAAAA,IAAI,EAAEP,aAD8B;AAEpCM,EAAAA;AAFoC,CAAZ,CAArB;AAKP,OAAO,MAAME,WAAW,GAAIC,IAAD,KAAW;AAClCF,EAAAA,IAAI,EAAEN,YAD4B;AAElCQ,EAAAA;AAFkC,CAAX,CAApB;AAKP,OAAO,MAAMC,UAAU,GAAIC,MAAD,KAAa;AACnCJ,EAAAA,IAAI,EAAEJ,WAD6B;AAEnCQ,EAAAA;AAFmC,CAAb,CAAnB;AAKP,OAAO,MAAMC,iBAAiB,GAAIC,MAAD,KAAa;AAC1CN,EAAAA,IAAI,EAAEH,mBADoC;AAE1CS,EAAAA;AAF0C,CAAb,CAA1B;AAKP,OAAO,MAAMC,cAAc,GAAIC,OAAD,KAAc;AACxCR,EAAAA,IAAI,EAAEL,gBADkC;AAExCa,EAAAA;AAFwC,CAAd,CAAvB,C,CAKP;;AACA,OAAO,MAAMC,UAAU,GAAIC,SAAD,IAAeC,QAAQ,IAC7CnB,QAAQ,CAACoB,QAAT,CAAkBF,SAAlB,EAA6BG,IAA7B,CAAmCd,KAAD,IAAWY,QAAQ,CAACb,YAAY,CAACC,KAAD,CAAb,CAArD,EACCe,KADD,CACQC,KAAD,IAAWJ,QAAQ,CAACN,iBAAiB,CAACU,KAAD,CAAlB,CAD1B,CADG;AAIP,OAAO,MAAMC,SAAS,GAAId,IAAD,IAAUS,QAAQ,IACvCnB,QAAQ,CAACyB,OAAT,CAAiBf,IAAjB,EAAuBW,IAAvB,CAA6BX,IAAD,IAAUS,QAAQ,CAACb,YAAY,CAACI,IAAD,CAAb,CAA9C,EACCY,KADD,CACQC,KAAD,IAAWJ,QAAQ,CAACN,iBAAiB,CAACU,KAAD,CAAlB,CAD1B,CADG;AAIP,OAAO,MAAMG,UAAU,GAAG,CAACR,SAAD,EAAYR,IAAZ,KAAqBS,QAAQ,IACnDnB,QAAQ,CAAC0B,UAAT,CAAoBR,SAApB,EAA+BR,IAA/B,EAAqCW,IAArC,CAA2CL,OAAD,IAAaG,QAAQ,CAACb,YAAY,CAACU,OAAD,CAAb,CAA/D,EACCM,KADD,CACQC,KAAD,IAAWJ,QAAQ,CAACN,iBAAiB,CAACU,KAAD,CAAlB,CAD1B,CADG;AAIP,OAAO,MAAMI,UAAU,GAAG,CAACf,MAAD,EAASgB,QAAT,KAAsBT,QAAQ,IACpDnB,QAAQ,CAAC2B,UAAT,CAAoBf,MAApB,EAA4BgB,QAA5B,EAAsCP,IAAtC,CAA4CX,IAAD,IAAUS,QAAQ,CAACb,YAAY,CAACI,IAAD,CAAb,CAA7D,EACCY,KADD,CACQC,KAAD,IAAWJ,QAAQ,CAACN,iBAAiB,CAACU,KAAD,CAAlB,CAD1B,CADG;AAIP,OAAO,MAAMM,UAAU,GAAIjB,MAAD,IAAYO,QAAQ,IAC1CnB,QAAQ,CAAC6B,UAAT,CAAoBjB,MAApB,EAA4BS,IAA5B,CAAiC,MAAMF,QAAQ,CAACb,YAAY,CAACM,MAAD,CAAb,CAA/C,EACCU,KADD,CACQC,KAAD,IAAWJ,QAAQ,CAACN,iBAAiB,CAACU,KAAD,CAAlB,CAD1B,CADG","sourcesContent":["import * as TaskUtil from '../util/task_api_util';\n\n// Action types\nexport const RECEIVE_TASKS = 'RECEIVE_TASKS';\nexport const RECEIVE_TASK = 'RECEIVE_TASK';\nexport const RECEIVE_NEW_TASK = 'RECEIVE_NEW_TASK';\nexport const DELETE_TASK = 'DELETE_TASK';\nexport const RECEIVE_TASK_ERRORS = 'RECEIVE_TASK_ERRORS';\n\n// Regular action creators\nexport const receiveTasks = (tasks) => ({\n    type: RECEIVE_TASKS,\n    tasks\n});\n\nexport const receiveTask = (task) => ({\n    type: RECEIVE_TASK,\n    task\n});\n\nexport const removeTask = (taskId) => ({\n    type: DELETE_TASK,\n    taskId\n});\n\nexport const receiveTaskErrors = (errors) => ({\n    type: RECEIVE_TASK_ERRORS,\n    errors\n});\n\nexport const receiveNewTask = (patient) => ({\n    type: RECEIVE_NEW_TASK, \n    patient\n})\n\n//Thunk action creators\nexport const fetchTasks = (patientId) => dispatch =>\n    TaskUtil.getTasks(patientId).then((tasks) => dispatch(receiveTasks(tasks)))\n    .catch((error) => dispatch(receiveTaskErrors(error)));\n\nexport const fetchTask = (task) => dispatch =>\n    TaskUtil.getTask(task).then((task) => dispatch(receiveTasks(task)))\n    .catch((error) => dispatch(receiveTaskErrors(error)));\n\nexport const createTask = (patientId, task) => dispatch =>\n    TaskUtil.createTask(patientId, task).then((patient) => dispatch(receiveTasks(patient)))\n    .catch((error) => dispatch(receiveTaskErrors(error)));\n\nexport const updateTask = (taskId, taskData) => dispatch =>\n    TaskUtil.updateTask(taskId, taskData).then((task) => dispatch(receiveTasks(task)))\n    .catch((error) => dispatch(receiveTaskErrors(error)));\n\nexport const deleteTask = (taskId) => dispatch =>\n    TaskUtil.deleteTask(taskId).then(() => dispatch(receiveTasks(taskId)))\n    .catch((error) => dispatch(receiveTaskErrors(error)));\n"]},"metadata":{},"sourceType":"module"}