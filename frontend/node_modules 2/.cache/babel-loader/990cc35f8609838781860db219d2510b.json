{"ast":null,"code":"var _jsxFileName = \"/Users/aliashafi/Documents/AppAcademy/Projects/NeuroDB/frontend/src/components/Dashboard/radar_chart.jsx\";\nimport React, { useState, useEffect } from 'react';\nimport * as d3 from 'd3';\nimport '../../css/deethree.scss';\n\nfunction RadarChart(props) {\n  const data = [[//CUSTOM SELECTED PATIENT POOL OR FOR A PROJECT\n  {\n    axis: \"Amygdala\",\n    value: 12.3 / 100\n  }, {\n    axis: \"Hippo- campus\",\n    value: 20.5 / 100\n  }, {\n    axis: \"Insula\",\n    value: 49.1 / 100\n  }, {\n    axis: \"Temporal pole\",\n    value: 22.5 / 100\n  }, {\n    axis: \"Temporal lobe\",\n    value: 30.1 / 100\n  }, {\n    axis: \"Fusiform gyrus\",\n    value: 10.0 / 100\n  }, {\n    axis: \"Precuneus\",\n    value: 19.3 / 100\n  }, {\n    axis: \"Occipital lobe\",\n    value: 34.2 / 100\n  }, {\n    axis: \"Lingual gyrus\",\n    value: 71.9 / 100\n  }, {\n    axis: \"Perical- carine cortex\",\n    value: 73 / 100\n  }, {\n    axis: \"Cuneus cortex\",\n    value: 25 / 100\n  }, {\n    axis: \"Posterior\",\n    value: 20 / 100\n  }], [//CUSTOM SELECTED PATIENT POOL OR FOR A PROJECT\n  {\n    axis: \"Amygdala\",\n    value: 39.0 / 100\n  }, {\n    axis: \"Hippo- campus\",\n    value: 12.0 / 100\n  }, {\n    axis: \"Insula\",\n    value: 59.0 / 100\n  }, {\n    axis: \"Temporal pole\",\n    value: 60.2 / 100\n  }, {\n    axis: \"Temporal lobe\",\n    value: 87.0 / 100\n  }, {\n    axis: \"Fusiform gyrus\",\n    value: 44.5 / 100\n  }, {\n    axis: \"Precuneus\",\n    value: 20.4 / 100\n  }, {\n    axis: \"Occipital lobe\",\n    value: 17.4 / 100\n  }, {\n    axis: \"Lingual gyrus\",\n    value: 87.3 / 100\n  }, {\n    axis: \"Perical- carine cortex\",\n    value: 55.2 / 100\n  }, {\n    axis: \"Cuneus cortex\",\n    value: 69.0 / 100\n  }, {\n    axis: \"Posterior\",\n    value: 34.0 / 100\n  }]];\n  useEffect(() => {\n    renderRadar();\n  }, []);\n\n  function renderRadar() {\n    render(data);\n\n    function render(data) {\n      let svg = d3.select('.radarChart');\n      const config = {\n        margin: {\n          top: 30,\n          right: 20,\n          bottom: 30,\n          left: 20\n        },\n        w: +svg.attr('width') - 40,\n        h: +svg.attr('height'),\n        levels: 5,\n        maxValue: 1,\n        labelFactor: 1.2,\n        wrapWidth: 60,\n        blobOpacity: 0.35,\n        dotRadius: 2,\n        opacityCircles: 0.5,\n        strokeWidth: 2,\n        roundStrokes: true,\n        color: d3.scaleOrdinal(d3.schemeSet2)\n      }; // brain region axis\n\n      const allAxis = data[0].map(d => d.axis);\n      const radius = config.w / 3;\n      const format = d3.format(\".0%\");\n      const axisAngle = Math.PI * 2 / allAxis.length; // radial scale\n\n      const rScale = d3.scaleLinear().range([0, radius]).domain([0, config.maxValue]); //Initiate the radar chart SVG\n\n      svg = d3.select('.radarChart').append(\"svg\").attr(\"width\", config.w + config.margin.left + config.margin.right).attr(\"height\", config.h + config.margin.top + config.margin.bottom).attr(\"class\", \"radarChartSvg\");\n      svg.append('text').text('Percent Brain Region Coverage by Studies').attr(\"transform\", \"translate(\".concat(config.w / 2 + config.margin.left, \", 60)\")).attr('class', 'title'); //Append a g element\t\t\n\n      const g = svg.append(\"g\").attr(\"transform\", \"translate(\".concat(config.w / 2 + config.margin.left, \", \").concat(config.h / 2 + config.margin.top, \")\")).attr('class', 'chartContainerG'); //Wrapper for the grid & axes\n\n      const gridG = g.append(\"g\").attr(\"class\", \"gridWrapper\"); //Draw the background circles\n\n      gridG.selectAll(\".levels\").data(d3.range(1, config.levels + 1).reverse()).join('circle').attr(\"class\", \"gridRings\").attr(\"r\", d => radius / config.levels * d).style(\"fill\", \"#ffffff\").style(\"stroke\", \"#cccccc\").style(\"fill-opacity\", config.opacityCircles); //Text indicating at what % each level is\n\n      gridG.selectAll(\".gridLabel\").data(d3.range(1, config.levels + 1).reverse()).enter().append(\"text\").attr(\"class\", \"gridLabel\").attr(\"x\", 4).attr(\"y\", d => -d / config.levels * radius).text(d => format(config.maxValue * d / config.levels)); //Create the straight lines radiating outward from the center\n\n      const axis = gridG.selectAll(\".axis\").data(allAxis).join(\"g\").attr(\"class\", \"axis\"); //Append the lines\n\n      axis.append(\"line\").attr(\"x1\", 0).attr(\"y1\", 0).attr(\"x2\", (d, i) => rScale(config.maxValue * 1.05) * Math.cos(axisAngle * i - Math.PI / 2)).attr(\"y2\", (d, i) => rScale(config.maxValue * 1.05) * Math.sin(axisAngle * i - Math.PI / 2)).attr(\"class\", \"axisLine\"); //Append the labels at each axis\n\n      axis.append(\"text\").attr(\"class\", \"axisLabel\").attr(\"dy\", \"0.35em\").attr(\"x\", (d, i) => rScale(config.maxValue * config.labelFactor) * Math.cos(axisAngle * i - Math.PI / 2)).attr(\"y\", (d, i) => rScale(config.maxValue * config.labelFactor) * Math.sin(axisAngle * i - Math.PI / 2)).text(d => d).call(wrap, 60); //The radial line function\n\n      const radarLine = d3.radialLine().radius(d => rScale(d.value)).angle((d, i) => i * axisAngle).curve(d3.curveCardinalClosed); //Create a wrapper for the blobs\t\n\n      const blobWrapper = g.selectAll(\".dataBlobWrapper\").data(data).join(\"g\").attr(\"class\", \"dataBlobWrapper\");\n\n      const onBlobHover = i => {\n        d3.selectAll(\".blobArea\").transition().duration(200).style(\"fill-opacity\", 0.1); //Bring back the hovered over blob\n\n        d3.select(\".blob-\".concat(i)).transition().duration(200).style(\"fill-opacity\", 0.7);\n      };\n\n      const onHoverExit = () => {\n        d3.selectAll(\".blobArea\").transition().duration(200).style(\"fill-opacity\", config.blobOpacity);\n      }; //Append the backgrounds\t\n\n\n      blobWrapper.append(\"path\").attr(\"class\", (d, i) => \"blobArea blob-\".concat(i)).attr(\"d\", d => radarLine(d)).style(\"fill\", (d, i) => config.color(i)).style(\"fill-opacity\", config.blobOpacity).on('mouseover', (d, i) => onBlobHover(i)).on('mouseout', onHoverExit); //Create the outlines\t\n\n      blobWrapper.append(\"path\").attr(\"class\", \"radarStroke\").attr(\"d\", d => radarLine(d)).style(\"stroke-width\", config.strokeWidth).style(\"stroke\", (d, i) => config.color(i)).style(\"fill\", \"none\"); //Append the circles\n\n      blobWrapper.selectAll(\".radarCircle\").data(d => d).join(\"circle\").attr(\"class\", \"radarCircle\").attr(\"r\", config.dotRadius).attr(\"cx\", (d, i) => rScale(d.value) * Math.cos(axisAngle * i - Math.PI / 2)).attr(\"cy\", (d, i) => rScale(d.value) * Math.sin(axisAngle * i - Math.PI / 2)).style(\"fill\", (d, i, j) => config.color(j)); //Taken from http://bl.ocks.org/mbostock/7555321\n      //Wraps SVG text\t\n\n      function wrap(text, width) {\n        text.each(function () {\n          var text = d3.select(this),\n              words = text.text().split(/\\s+/).reverse(),\n              word,\n              line = [],\n              lineNumber = 0,\n              lineHeight = 1.4,\n              // ems\n          y = text.attr(\"y\"),\n              x = text.attr(\"x\"),\n              dy = parseFloat(text.attr(\"dy\")),\n              tspan = text.text(null).append(\"tspan\").attr(\"x\", x).attr(\"y\", y).attr(\"dy\", dy + \"em\");\n\n          while (word = words.pop()) {\n            line.push(word);\n            tspan.text(line.join(\" \"));\n\n            if (tspan.node().getComputedTextLength() > width) {\n              line.pop();\n              tspan.text(line.join(\" \"));\n              line = [word];\n              tspan = text.append(\"tspan\").attr(\"x\", x).attr(\"y\", y).attr(\"dy\", ++lineNumber * lineHeight + dy + \"em\").text(word);\n            }\n          }\n        });\n      } //wrap\n\n    }\n  }\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 229\n    },\n    __self: this\n  }, React.createElement(\"svg\", {\n    className: \"radarChart\",\n    width: \"500\",\n    height: \"500\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 230\n    },\n    __self: this\n  }));\n}\n\nexport default RadarChart;","map":{"version":3,"sources":["/Users/aliashafi/Documents/AppAcademy/Projects/NeuroDB/frontend/src/components/Dashboard/radar_chart.jsx"],"names":["React","useState","useEffect","d3","RadarChart","props","data","axis","value","renderRadar","render","svg","select","config","margin","top","right","bottom","left","w","attr","h","levels","maxValue","labelFactor","wrapWidth","blobOpacity","dotRadius","opacityCircles","strokeWidth","roundStrokes","color","scaleOrdinal","schemeSet2","allAxis","map","d","radius","format","axisAngle","Math","PI","length","rScale","scaleLinear","range","domain","append","text","g","gridG","selectAll","reverse","join","style","enter","i","cos","sin","call","wrap","radarLine","radialLine","angle","curve","curveCardinalClosed","blobWrapper","onBlobHover","transition","duration","onHoverExit","on","j","width","each","words","split","word","line","lineNumber","lineHeight","y","x","dy","parseFloat","tspan","pop","push","node","getComputedTextLength"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from 'react';\nimport * as d3 from 'd3';\nimport '../../css/deethree.scss';\n\nfunction RadarChart(props) {\n\n    const data = [\n        [ //CUSTOM SELECTED PATIENT POOL OR FOR A PROJECT\n            {axis:\"Amygdala\",value:12.3/100},\n            {axis:\"Hippo- campus\",value:20.5/100},\n            {axis:\"Insula\",value:49.1/100},\n            {axis:\"Temporal pole\",value:22.5/100},\n            {axis:\"Temporal lobe\",value:30.1/100},\n            {axis:\"Fusiform gyrus\",value:10.0/100},\n            {axis:\"Precuneus\",value:19.3/100},\n            {axis:\"Occipital lobe\",value:34.2/100},\n            {axis:\"Lingual gyrus\",value:71.9/100},\n            {axis:\"Perical- carine cortex\",value:73/100},\n            {axis:\"Cuneus cortex\",value:25/100},\n            {axis:\"Posterior\",value:20/100}\n            ],\n            [ //CUSTOM SELECTED PATIENT POOL OR FOR A PROJECT\n                {axis:\"Amygdala\",value:39.0/100},\n                {axis:\"Hippo- campus\",value:12.0/100},\n                {axis:\"Insula\",value:59.0/100},\n                {axis:\"Temporal pole\",value:60.2/100},\n                {axis:\"Temporal lobe\",value:87.0/100},\n                {axis:\"Fusiform gyrus\",value:44.5/100},\n                {axis:\"Precuneus\",value:20.4/100},\n                {axis:\"Occipital lobe\",value:17.4/100},\n                {axis:\"Lingual gyrus\",value:87.3/100},\n                {axis:\"Perical- carine cortex\",value:55.2/100},\n                {axis:\"Cuneus cortex\",value:69.0/100},\n                {axis:\"Posterior\",value:34.0/100}\n                ]\n        ];\n\n    useEffect(() => {\n        renderRadar();\n    }, []);\n\n\n    function renderRadar() {\n\n        render(data);\n        \n        function render(data) {\n            let svg = d3.select('.radarChart');\n            const config = {\n                margin: {top: 30, right: 20, bottom: 30, left: 20}, \n                w: +svg.attr('width') - 40,\t\t\t\t\n                h: +svg.attr('height'),\t\t\t\t\n                levels: 5,\t\t\t\t\t\t\n                maxValue: 1, \t\t\t\t\n                labelFactor: 1.2, \t\n                wrapWidth: 60, \t\t\n                blobOpacity: 0.35, \t\n                dotRadius: 2, \t\t\t\t\n                opacityCircles: 0.5, \t\n                strokeWidth: 2, \t\t\t\n                roundStrokes: true,\t\n                color: d3.scaleOrdinal(d3.schemeSet2) \t\t\n            };\n        \n            // brain region axis\n            const allAxis = (data[0].map(d => d.axis));\n            const radius = (config.w)/3; \t\n            const format = d3.format(\".0%\");\t\t\t \t\n            const axisAngle = Math.PI * 2 / allAxis.length;\t\t\n            \n            // radial scale\n            const rScale = d3.scaleLinear()\n                .range([0, radius])\n                .domain([0, config.maxValue]);\n                \n\n            //Initiate the radar chart SVG\n            svg = d3.select('.radarChart').append(\"svg\")\n                .attr(\"width\",  config.w + config.margin.left + config.margin.right)\n                .attr(\"height\", config.h + config.margin.top + config.margin.bottom)\n                .attr(\"class\", \"radarChartSvg\");\n            \n            svg.append('text').text('Percent Brain Region Coverage by Studies')\n                .attr(\"transform\", `translate(${config.w/2 + config.margin.left}, 60)`)\n                .attr('class', 'title');\n\n            //Append a g element\t\t\n            const g = svg.append(\"g\")\n                .attr(\"transform\", `translate(${config.w/2 + config.margin.left}, ${config.h/2 + config.margin.top})`)\n                .attr('class', 'chartContainerG');\n\n            //Wrapper for the grid & axes\n            const gridG = g.append(\"g\")\n                .attr(\"class\", \"gridWrapper\");\n        \n            //Draw the background circles\n            gridG.selectAll(\".levels\")\n                .data(d3.range(1,(config.levels+1)).reverse())\n                .join('circle')\n                .attr(\"class\", \"gridRings\")\n                .attr(\"r\", d => radius/config.levels*d)\n                .style(\"fill\", \"#ffffff\")\n                .style(\"stroke\", \"#cccccc\")\n                .style(\"fill-opacity\", config.opacityCircles)\n\n\n            //Text indicating at what % each level is\n            gridG.selectAll(\".gridLabel\")\n                .data(d3.range(1,(config.levels+1)).reverse())\n                .enter().append(\"text\")\n                .attr(\"class\", \"gridLabel\")\n                .attr(\"x\", 4)\n                .attr(\"y\", d => (-d/config.levels) * radius)\n                .text(d => format(config.maxValue * d/config.levels));\n\n            //Create the straight lines radiating outward from the center\n            const axis = gridG.selectAll(\".axis\")\n                .data(allAxis)\n                .join(\"g\")\n                .attr(\"class\", \"axis\");\n            //Append the lines\n            axis.append(\"line\")\n                .attr(\"x1\", 0)\n                .attr(\"y1\", 0)\n                .attr(\"x2\", (d, i) => rScale(config.maxValue*1.05) * Math.cos(axisAngle*i - Math.PI/2))\n                .attr(\"y2\", (d, i) => rScale(config.maxValue*1.05) * Math.sin(axisAngle*i - Math.PI/2))\n                .attr(\"class\", \"axisLine\");\n            \n\n            //Append the labels at each axis\n            axis.append(\"text\")\n                .attr(\"class\", \"axisLabel\")\n                .attr(\"dy\", \"0.35em\")\n                .attr(\"x\", (d, i) => rScale(config.maxValue * config.labelFactor) * Math.cos(axisAngle*i - Math.PI/2))\n                .attr(\"y\", (d, i) => rScale(config.maxValue * config.labelFactor) * Math.sin(axisAngle*i - Math.PI/2))\n                .text(d => d)\n                .call(wrap, 60);\n        \n\n            //The radial line function\n            const radarLine = d3.radialLine()\n                .radius(d => rScale(d.value))\n                .angle((d, i) => i*axisAngle)\n                .curve(d3.curveCardinalClosed);\n                \n            \n            //Create a wrapper for the blobs\t\n            const blobWrapper = g.selectAll(\".dataBlobWrapper\")\n                .data(data)\n                .join(\"g\")\n                .attr(\"class\", \"dataBlobWrapper\");\n                \n            const onBlobHover = (i) => {\n                d3.selectAll(\".blobArea\")\n                    .transition().duration(200)\n                    .style(\"fill-opacity\", 0.1); \n                    //Bring back the hovered over blob\n                d3.select(`.blob-${i}`)\n                    .transition().duration(200)\n                    .style(\"fill-opacity\", 0.7);\n            }\n            const onHoverExit = () => {\n                d3.selectAll(\".blobArea\")\n                    .transition().duration(200)\n                    .style(\"fill-opacity\", config.blobOpacity);\n            }\n            //Append the backgrounds\t\n            blobWrapper\n                .append(\"path\")\n                .attr(\"class\", (d, i) => `blobArea blob-${i}`)\n                .attr(\"d\", d => radarLine(d))\n                .style(\"fill\", (d, i) => config.color(i))\n                .style(\"fill-opacity\", config.blobOpacity)\n                .on('mouseover', (d, i) => onBlobHover(i))\n                .on('mouseout', onHoverExit);\n\n            \n            //Create the outlines\t\n            blobWrapper.append(\"path\")\n                .attr(\"class\", \"radarStroke\")\n                .attr(\"d\", d => radarLine(d))\n                .style(\"stroke-width\", config.strokeWidth)\n                .style(\"stroke\", (d, i) => config.color(i))\n                .style(\"fill\", \"none\")\n\n        \n            //Append the circles\n            blobWrapper.selectAll(\".radarCircle\")\n                .data(d => d)\n                .join(\"circle\")\n                .attr(\"class\", \"radarCircle\")\n                .attr(\"r\", config.dotRadius)\n                .attr(\"cx\", (d, i) => rScale(d.value) * Math.cos(axisAngle*i - Math.PI/2))\n                .attr(\"cy\", (d, i) => rScale(d.value) * Math.sin(axisAngle*i - Math.PI/2))\n                .style(\"fill\", (d,i,j) => config.color(j));\n            \n\n            //Taken from http://bl.ocks.org/mbostock/7555321\n            //Wraps SVG text\t\n            function wrap(text, width) {\n                text.each(function() {\n                var text = d3.select(this),\n                    words = text.text().split(/\\s+/).reverse(),\n                    word,\n                    line = [],\n                    lineNumber = 0,\n                    lineHeight = 1.4, // ems\n                    y = text.attr(\"y\"),\n                    x = text.attr(\"x\"),\n                    dy = parseFloat(text.attr(\"dy\")),\n                    tspan = text.text(null).append(\"tspan\").attr(\"x\", x).attr(\"y\", y).attr(\"dy\", dy + \"em\");\n                    \n                while (word = words.pop()) {\n                    line.push(word);\n                    tspan.text(line.join(\" \"));\n                    if (tspan.node().getComputedTextLength() > width) {\n                    line.pop();\n                    tspan.text(line.join(\" \"));\n                    line = [word];\n                    tspan = text.append(\"tspan\").attr(\"x\", x).attr(\"y\", y).attr(\"dy\", ++lineNumber * lineHeight + dy + \"em\").text(word);\n                }\n            }\n        });\n      }//wrap\n        }\n    }\n\n    return (\n        <div>\n            <svg className='radarChart' width='500' height='500'></svg>\n        </div>\n    );\n}\n\nexport default RadarChart;"]},"metadata":{},"sourceType":"module"}