{"ast":null,"code":"export const formatDate = date => {\n  const months = {\n    1: 'January',\n    2: 'February',\n    3: 'March',\n    4: 'April',\n    5: 'May',\n    6: 'June',\n    7: 'July',\n    8: 'August',\n    9: 'September',\n    10: 'October',\n    11: 'November',\n    12: 'December'\n  };\n  const daysOfWeek = {\n    1: 'Sunday',\n    2: 'Monday',\n    3: 'Tuesday',\n    4: 'Wednesday',\n    5: 'Thursday',\n    6: 'Friday',\n    7: 'Saturday'\n  };\n  let dateString = \"\";\n  const newDate = date.split(\"T\");\n  const ymd = newDate[0].split(\"-\");\n  const year = ymd[0];\n  const month = parseInt(ymd[1]);\n  const day = parseInt(ymd[2]);\n  const time = newDate[1].split(':');\n  let firstTime = parseInt(time[0]);\n  let secTime = parseInt(time[1]);\n  let am_pm = \"AM\";\n\n  if (firstTime > 24 && firstTime !== 12) {\n    firstTime = firstTime - 12;\n    am_pm = 'PM';\n  }\n\n  return \"\".concat(months[month], \" \").concat(day, \" \").concat(year);\n};","map":{"version":3,"sources":["/Users/aliashafi/Documents/AppAcademy/Projects/NeuroDB/frontend/src/util/date_api_uil.js"],"names":["formatDate","date","months","daysOfWeek","dateString","newDate","split","ymd","year","month","parseInt","day","time","firstTime","secTime","am_pm"],"mappings":"AAAA,OAAO,MAAMA,UAAU,GAAGC,IAAI,IAAI;AAC9B,QAAMC,MAAM,GAAG;AACX,OAAG,SADQ;AAEX,OAAG,UAFQ;AAGX,OAAG,OAHQ;AAIX,OAAG,OAJQ;AAKX,OAAG,KALQ;AAMX,OAAG,MANQ;AAOX,OAAG,MAPQ;AAQX,OAAG,QARQ;AASX,OAAG,WATQ;AAUX,QAAI,SAVO;AAWX,QAAI,UAXO;AAYX,QAAI;AAZO,GAAf;AAcA,QAAMC,UAAU,GAAG;AACf,OAAG,QADY;AAEf,OAAG,QAFY;AAGf,OAAG,SAHY;AAIf,OAAG,WAJY;AAKf,OAAG,UALY;AAMf,OAAG,QANY;AAOf,OAAG;AAPY,GAAnB;AAWA,MAAIC,UAAU,GAAG,EAAjB;AACA,QAAMC,OAAO,GAAGJ,IAAI,CAACK,KAAL,CAAW,GAAX,CAAhB;AACA,QAAMC,GAAG,GAAGF,OAAO,CAAC,CAAD,CAAP,CAAWC,KAAX,CAAiB,GAAjB,CAAZ;AACA,QAAME,IAAI,GAAGD,GAAG,CAAC,CAAD,CAAhB;AACA,QAAME,KAAK,GAAGC,QAAQ,CAACH,GAAG,CAAC,CAAD,CAAJ,CAAtB;AACA,QAAMI,GAAG,GAAGD,QAAQ,CAACH,GAAG,CAAC,CAAD,CAAJ,CAApB;AACA,QAAMK,IAAI,GAAGP,OAAO,CAAC,CAAD,CAAP,CAAWC,KAAX,CAAiB,GAAjB,CAAb;AACA,MAAIO,SAAS,GAAGH,QAAQ,CAACE,IAAI,CAAC,CAAD,CAAL,CAAxB;AACA,MAAIE,OAAO,GAAGJ,QAAQ,CAACE,IAAI,CAAC,CAAD,CAAL,CAAtB;AAEA,MAAIG,KAAK,OAAT;;AACI,MAAIF,SAAS,GAAG,EAAZ,IAAkBA,SAAS,KAAK,EAApC,EAAwC;AACpCA,IAAAA,SAAS,GAAGA,SAAS,GAAG,EAAxB;AACAE,IAAAA,KAAK,GAAG,IAAR;AACH;;AAIL,mBAAUb,MAAM,CAACO,KAAD,CAAhB,cAA2BE,GAA3B,cAAkCH,IAAlC;AAAyC,CA5CtC","sourcesContent":["export const formatDate = date => {\n    const months = {\n        1: 'January',\n        2: 'February',\n        3: 'March',\n        4: 'April',\n        5: 'May',\n        6: 'June',\n        7: 'July',\n        8: 'August',\n        9: 'September',\n        10: 'October',\n        11: 'November',\n        12: 'December',\n    };\n    const daysOfWeek = {\n        1: 'Sunday',\n        2: 'Monday',\n        3: 'Tuesday',\n        4: 'Wednesday',\n        5: 'Thursday',\n        6: 'Friday',\n        7: 'Saturday',\n    };\n\n\n    let dateString = \"\"\n    const newDate = date.split(\"T\");\n    const ymd = newDate[0].split(\"-\");\n    const year = ymd[0];\n    const month = parseInt(ymd[1]);\n    const day = parseInt(ymd[2]);\n    const time = newDate[1].split(':')\n    let firstTime = parseInt(time[0])\n    let secTime = parseInt(time[1])\n\n    let am_pm = `AM`;\n        if (firstTime > 24 && firstTime !== 12) {\n            firstTime = firstTime - 12\n            am_pm = 'PM'\n        }\n\n\n\n    return `${months[month]} ${day} ${year}`}"]},"metadata":{},"sourceType":"module"}