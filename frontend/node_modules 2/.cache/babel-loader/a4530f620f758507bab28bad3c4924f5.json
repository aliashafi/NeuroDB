{"ast":null,"code":"var _jsxFileName = \"/Users/aliashafi/Documents/AppAcademy/Projects/NeuroDB/frontend/src/components/Dashboard/bar_graph.jsx\";\nimport React, { useState, useEffect } from 'react';\nimport * as d3 from 'd3';\nimport '../../css/deethree.scss';\n\nfunction BarGraph(props) {\n  const data = props.data;\n  useEffect(() => {\n    renderBarGraph();\n  }, []);\n\n  function renderBarGraph() {\n    const svg = d3.select('.bar-graph');\n    const width = +svg.attr('width');\n    const height = +svg.attr('height');\n\n    const render = data => {\n      //value accessors\n      const xValue = d => d.value;\n\n      const yValue = d => d.label;\n\n      const margin = {\n        top: 80,\n        right: 150,\n        bottom: 40,\n        left: 80\n      };\n      const innerWidth = width - margin.left - margin.right;\n      const innerHeight = height - margin.top - margin.bottom;\n      const color = d3.scaleOrdinal(d3.schemePaired); //horizontal scale --- each scale need domain and range defined\n\n      const xScale = d3.scaleLinear().domain([0, d3.max(data, d => d.value)]).range([0, innerWidth]); //vertical scale --- band scale for ordinal elements\n      //bandwidth: computed width of a single bar\n\n      const yScale = d3.scaleBand().domain(data.map(d => d.label)).range([0, innerHeight]).padding(0.1); //d3.format \n      //render bar for each data set\n\n      const g = svg.append('g') //create a grouping and move it to create margin space\n      .attr('transform', \"translate(\".concat(margin.right, \", \").concat(margin.top, \")\")); //create and append axis\n\n      const xAxisTickFormat = number => d3.format('.3s')(number).replace('G', 'B'); //customize to rplace G with B\n\n\n      const xAxis = d3.axisBottom(xScale).tickFormat(xAxisTickFormat).tickSize(-innerHeight);\n      const xAxisGroup = g.append('g').call(xAxis).attr('transform', \"translate(0, \".concat(innerHeight, \")\")).attr('fill', 'black');\n      xAxisGroup.select('.domain').remove();\n      xAxisGroup.append('text').attr('class', 'bar-graph-xlabel').attr('y', 30).attr('x', innerWidth / 2).text('Number of patients');\n      const yAxisGroup = g.append('g').call(d3.axisLeft(yScale)).attr('fill', 'black').attr('class', 'bar-graph-ylabel').selectAll('.domain, .tick line').remove(); // remove the y-axis domain line and the ticks\n      // all bars are now in the above grouping    \n\n      g.selectAll('rect').data(data).enter().append('rect').attr('y', d => yScale(yValue(d))).attr('width', d => xScale(xValue(d))).attr('height', yScale.bandwidth()).style('fill', (d, i) => color(i)); //add title and label\n\n      g.append('text').attr('class', 'title').attr('transform', \"translate(\".concat((innerWidth - 50) / 2, \", -40)\")).text('Number of Patients Per Study');\n    };\n\n    data.forEach(d => {\n      d.population = +d.population * 1000;\n    });\n    render(data);\n  }\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95\n    },\n    __self: this\n  }, React.createElement(\"svg\", {\n    className: \"bar-graph\",\n    width: \"700\",\n    height: \"400\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96\n    },\n    __self: this\n  }));\n}\n\nexport default BarGraph;","map":{"version":3,"sources":["/Users/aliashafi/Documents/AppAcademy/Projects/NeuroDB/frontend/src/components/Dashboard/bar_graph.jsx"],"names":["React","useState","useEffect","d3","BarGraph","props","data","renderBarGraph","svg","select","width","attr","height","render","xValue","d","value","yValue","label","margin","top","right","bottom","left","innerWidth","innerHeight","color","scaleOrdinal","schemePaired","xScale","scaleLinear","domain","max","range","yScale","scaleBand","map","padding","g","append","xAxisTickFormat","number","format","replace","xAxis","axisBottom","tickFormat","tickSize","xAxisGroup","call","remove","text","yAxisGroup","axisLeft","selectAll","enter","bandwidth","style","i","forEach","population"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from 'react';\nimport * as d3 from 'd3';\nimport '../../css/deethree.scss';\n\nfunction BarGraph(props) {\n\n    const data = props.data;\n\n    useEffect(() => {\n    renderBarGraph();\n\n    }, []);\n\n    function renderBarGraph(){\n        const svg = d3.select('.bar-graph');\n        const width = +svg.attr('width');\n        const height = +svg.attr('height');\n        \n        const render = data => {\n            //value accessors\n            const xValue = d => d.value;\n            const yValue = d => d.label;\n            const margin = { top: 80, right:150, bottom: 40, left: 80 };\n            const innerWidth = width - margin.left - margin.right;\n            const innerHeight = height - margin.top - margin.bottom;\n            const color = d3.scaleOrdinal(d3.schemePaired);\n            \n            //horizontal scale --- each scale need domain and range defined\n            const xScale = d3.scaleLinear()\n                .domain([0, d3.max(data, d => d.value)])\n                .range([0, innerWidth]);\n                    \n            //vertical scale --- band scale for ordinal elements\n            //bandwidth: computed width of a single bar\n            const yScale = d3.scaleBand()\n                .domain(data.map(d => d.label))\n                .range([0, innerHeight])\n                .padding(0.1);\n\n            //d3.format \n\n            \n            \n\n            //render bar for each data set\n            const g = svg.append('g') //create a grouping and move it to create margin space\n                .attr('transform', `translate(${margin.right}, ${margin.top})`);\n            \n            //create and append axis\n            const xAxisTickFormat = number => d3.format('.3s')(number)\n                .replace('G', 'B'); //customize to rplace G with B\n            const xAxis = d3.axisBottom(xScale)\n                .tickFormat(xAxisTickFormat)\n                .tickSize(-innerHeight);\n\n            const xAxisGroup = g.append('g').call(xAxis)\n                .attr('transform', `translate(0, ${innerHeight})`)\n                .attr('fill', 'black');\n            xAxisGroup.select('.domain').remove();\n            xAxisGroup.append('text')\n                .attr('class', 'bar-graph-xlabel')\n                .attr('y', 30)\n                .attr('x', innerWidth/2)\n                .text('Number of patients');\n           \n            const yAxisGroup = g.append('g')\n                .call(d3.axisLeft(yScale))\n                .attr('fill', 'black')\n                .attr('class', 'bar-graph-ylabel')\n                .selectAll('.domain, .tick line') \n                .remove();  // remove the y-axis domain line and the ticks\n\n            // all bars are now in the above grouping    \n            g.selectAll('rect').data(data)\n                .enter().append('rect')\n                    .attr('y', d => yScale(yValue(d)))\n                    .attr('width', d => xScale(xValue(d)))\n                    .attr('height', yScale.bandwidth())\n                    .style('fill', (d, i) => color(i));\n\n            //add title and label\n            g.append('text')\n                .attr('class', 'title')\n                .attr('transform', `translate(${(innerWidth-50)/2}, -40)`)\n                .text('Number of Patients Per Study');\n        }\n\n        data.forEach(d => {\n            d.population = +d.population * 1000;\n        });\n        render(data);\n    }\n\n    return (\n        <div>\n            <svg className='bar-graph' width='700' height='400'></svg>\n        </div>\n    );\n\n}\n\nexport default BarGraph;"]},"metadata":{},"sourceType":"module"}