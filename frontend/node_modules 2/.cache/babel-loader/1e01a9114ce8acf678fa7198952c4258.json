{"ast":null,"code":"import _slicedToArray from \"/Users/aliashafi/Documents/AppAcademy/Projects/NeuroDB/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/aliashafi/Documents/AppAcademy/Projects/NeuroDB/frontend/src/components/Patients/PatientShowSubcomp/patient_show_medication.jsx\";\nimport React, { useState, useEffect } from 'react';\n\nfunction PatientShowMedication(props) {\n  const _useState = useState(false),\n        _useState2 = _slicedToArray(_useState, 2),\n        renderEdit = _useState2[0],\n        setRenderEdit = _useState2[1];\n\n  const initMedicaitonName = props.patient.medication ? props.patient.medication.medicationName : '';\n  const initMedicationPurpose = props.patient.medication ? props.patient.medication.medicationPurpose : '';\n\n  const _useState3 = useState(initMedicaitonName),\n        _useState4 = _slicedToArray(_useState3, 2),\n        medicationName = _useState4[0],\n        setMedicationName = _useState4[1];\n\n  const _useState5 = useState(initMedicationPurpose),\n        _useState6 = _slicedToArray(_useState5, 2),\n        medicationPurpose = _useState6[0],\n        setMedicationPurpose = _useState6[1];\n\n  useEffect(() => {\n    if (props.patient.medication) {\n      setMedicationName(props.patient.medication.medicationName);\n      setMedicationPurpose(props.patient.medication.medicationPurpose);\n    }\n  }, [props.patient]);\n\n  function handleMedicationNameChange(e) {\n    setMedicationName(e.target.value);\n  }\n\n  function handleMedicationPurposeChange(e) {\n    setMedicationPurpose(e.target.value);\n  }\n\n  function renderMedicationNames() {\n    return props.patient.medication.map(medication => React.createElement(\"div\", {\n      className: \"medication-item\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28\n      },\n      __self: this\n    }, medication.medicationName));\n  }\n\n  function renderMedicationPurposes() {\n    return props.patient.medication.map(medication => React.createElement(\"div\", {\n      className: \"medication-item\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34\n      },\n      __self: this\n    }, medication.medicationPurpose || ''));\n  }\n\n  function renderComp() {\n    return React.createElement(React.Fragment, null, React.createElement(\"div\", {\n      className: \"inner-card__field-grouping\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"inner-card__field-label\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42\n      },\n      __self: this\n    }, \"Medication\"), React.createElement(\"div\", {\n      className: \"inner-card__field-value-medication\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"medication-body-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45\n      },\n      __self: this\n    }, renderMedicationNames()))), React.createElement(\"div\", {\n      className: \"inner-card__field-grouping\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"inner-card__field-label\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51\n      },\n      __self: this\n    }, \"Purpose\"), React.createElement(\"div\", {\n      className: \"inner-card__field-value-medication\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"medication-body-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    }, renderMedicationPurposes()))));\n  }\n\n  function handleEditClick(e) {\n    setRenderEdit(!renderEdit);\n    const allValueFields = document.querySelectorAll('.inner-card__field-value');\n    Array.from(allValueFields).forEach(field => field.classList.add('editable'));\n  }\n\n  function handleUpdateClick(e) {\n    //grab form input and dispatch updatePatient\n    setRenderEdit(!renderEdit);\n    const data = {\n      _id: props.patient._id,\n      medication: {\n        medicationName,\n        medicationPurpose\n      }\n    };\n    props.updatePatient(data).then(() => {\n      const allValueFields = document.querySelectorAll('.inner-card__field-value');\n      Array.from(allValueFields).forEach(field => field.classList.remove('editable'));\n    });\n  }\n\n  function handleCancelClick(e) {\n    setRenderEdit(!renderEdit);\n    setMedicationName(initMedicaitonName);\n    setMedicationPurpose(initMedicationPurpose);\n    const allValueFields = document.querySelectorAll('.inner-card__field-value');\n    Array.from(allValueFields).forEach(field => field.classList.remove('editable'));\n  }\n\n  function handleCancelClick(e) {\n    setRenderEdit(!renderEdit);\n    setMedicationName(initMedicaitonName);\n    setMedicationPurpose(initMedicationPurpose);\n    const allValueFields = document.querySelectorAll('.inner-card__field-value');\n    Array.from(allValueFields).forEach(field => field.classList.remove('editable'));\n  }\n\n  function renderButton() {\n    if (!renderEdit) {\n      return React.createElement(\"div\", {\n        className: \"btn-group\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        onClick: handleEditClick,\n        className: \"btn btn--card\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106\n        },\n        __self: this\n      }, \"Edit\"));\n    } else {\n      return React.createElement(\"div\", {\n        className: \"btn-group\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        onClick: handleUpdateClick,\n        className: \"btn btn--card\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112\n        },\n        __self: this\n      }, \"Update\"), React.createElement(\"div\", {\n        onClick: handleCancelClick,\n        className: \"btn btn--card\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113\n        },\n        __self: this\n      }, \"Cancel\"));\n    }\n  }\n\n  return React.createElement(\"div\", {\n    className: \"patient-show-inner-card-show\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120\n    },\n    __self: this\n  }, renderButton(), React.createElement(\"div\", {\n    className: \"patient-show-inner-card__header\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122\n    },\n    __self: this\n  }, \"Medication\"), React.createElement(\"div\", {\n    className: \"header-divider\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    className: \"patient-show-inner-card__medication-body\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"patient-show-inner-card__info2\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125\n    },\n    __self: this\n  }, renderComp())));\n}\n\nexport default PatientShowMedication;","map":{"version":3,"sources":["/Users/aliashafi/Documents/AppAcademy/Projects/NeuroDB/frontend/src/components/Patients/PatientShowSubcomp/patient_show_medication.jsx"],"names":["React","useState","useEffect","PatientShowMedication","props","renderEdit","setRenderEdit","initMedicaitonName","patient","medication","medicationName","initMedicationPurpose","medicationPurpose","setMedicationName","setMedicationPurpose","handleMedicationNameChange","e","target","value","handleMedicationPurposeChange","renderMedicationNames","map","renderMedicationPurposes","renderComp","handleEditClick","allValueFields","document","querySelectorAll","Array","from","forEach","field","classList","add","handleUpdateClick","data","_id","updatePatient","then","remove","handleCancelClick","renderButton"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\n\nfunction PatientShowMedication(props){\n    const [renderEdit, setRenderEdit] = useState(false);\n\n    const initMedicaitonName = (props.patient.medication) ? props.patient.medication.medicationName : '';\n    const initMedicationPurpose = (props.patient.medication) ? props.patient.medication.medicationPurpose : '';\n\n    const [medicationName, setMedicationName] = useState(initMedicaitonName);\n    const [medicationPurpose, setMedicationPurpose] = useState(initMedicationPurpose);\n\n    useEffect(() => {\n        if (props.patient.medication) {\n            setMedicationName(props.patient.medication.medicationName);\n            setMedicationPurpose(props.patient.medication.medicationPurpose);\n        }\n    }, [props.patient]);\n\n    function handleMedicationNameChange(e) {\n        setMedicationName(e.target.value);\n    }\n    function handleMedicationPurposeChange(e) {\n        setMedicationPurpose(e.target.value);\n    }\n\n    function renderMedicationNames() {\n        return props.patient.medication.map((medication) => (\n            <div className='medication-item'>{medication.medicationName}</div>\n        ));\n    }\n\n    function renderMedicationPurposes() {\n        return props.patient.medication.map((medication) => (\n            <div className='medication-item'>{medication.medicationPurpose || ''}</div>\n        ));\n    }\n\n    function renderComp() {\n        return (\n            <>\n            <div className='inner-card__field-grouping'>\n                <div className='inner-card__field-label'>Medication</div>\n                {/* <input onChange={handleMedicationNameChange} className='inner-card__field-value' value={medicationName} disabled={!renderEdit} /> */}\n                <div className='inner-card__field-value-medication'>\n                    <div className='medication-body-container'>\n                        {renderMedicationNames()}\n                    </div>\n                </div>\n            </div>\n            <div className='inner-card__field-grouping'>\n                <div className='inner-card__field-label'>Purpose</div>\n                {/* <input onChange={handleMedicationPurposeChange} className='inner-card__field-value' value={medicationPurpose} disabled={!renderEdit} /> */}\n                <div className='inner-card__field-value-medication'>\n                    <div className='medication-body-container'>\n                        {renderMedicationPurposes()}\n                    </div>\n                </div>\n            </div>\n            </>\n        );\n       \n    }\n\n    function handleEditClick(e) {\n        setRenderEdit(!renderEdit);\n        const allValueFields = document.querySelectorAll('.inner-card__field-value');\n        Array.from(allValueFields).forEach(field => field.classList.add('editable'));\n    }\n\n    function handleUpdateClick(e) {\n        //grab form input and dispatch updatePatient\n        setRenderEdit(!renderEdit);\n        const data = {\n            _id: props.patient._id,\n            medication: {\n                medicationName,\n                medicationPurpose\n            },\n        };\n        props.updatePatient(data)\n        .then(() => {\n            const allValueFields = document.querySelectorAll('.inner-card__field-value');\n            Array.from(allValueFields).forEach(field => field.classList.remove('editable'));\n        });\n    }\n    function handleCancelClick(e) {\n        setRenderEdit(!renderEdit);\n        setMedicationName(initMedicaitonName);\n        setMedicationPurpose(initMedicationPurpose);\n        const allValueFields = document.querySelectorAll('.inner-card__field-value');\n        Array.from(allValueFields).forEach(field => field.classList.remove('editable'));\n    }\n\n    function handleCancelClick(e) {\n        setRenderEdit(!renderEdit);\n        setMedicationName(initMedicaitonName);\n        setMedicationPurpose(initMedicationPurpose);\n        const allValueFields = document.querySelectorAll('.inner-card__field-value');\n        Array.from(allValueFields).forEach(field => field.classList.remove('editable'));\n    }\n\n    function renderButton() {\n        if (!renderEdit) {\n            return (\n                <div className='btn-group'>\n                    <div onClick={handleEditClick} className='btn btn--card'>Edit</div>\n                </div>\n            )\n        } else {\n            return (\n            <div className='btn-group'>\n                <div onClick={handleUpdateClick} className='btn btn--card'>Update</div>\n                <div onClick={handleCancelClick} className='btn btn--card'>Cancel</div>\n            </div>\n            )\n        }\n    }\n    \n    return (\n        <div className='patient-show-inner-card-show'>\n            {renderButton()}\n            <div className='patient-show-inner-card__header'>Medication</div>\n            <div className='header-divider'></div>\n            <div className='patient-show-inner-card__medication-body'>\n                <div className='patient-show-inner-card__info2'>\n                    {renderComp()}\n                </div>\n            </div>           \n\n        </div>\n    );\n    \n\n}\n\nexport default PatientShowMedication;"]},"metadata":{},"sourceType":"module"}